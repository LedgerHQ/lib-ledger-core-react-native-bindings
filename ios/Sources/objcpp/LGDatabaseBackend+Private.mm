// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#import "LGDatabaseBackend+Private.h"
#import "LGDatabaseBackend.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGDatabaseEngine+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGDatabaseBackend ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::DatabaseBackend>&)cppRef;

@end

@implementation LGDatabaseBackend {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::DatabaseBackend>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::DatabaseBackend>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)getConnectionPoolSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getConnectionPoolSize();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getReadonlyConnectionPoolSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getReadonlyConnectionPoolSize();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGDatabaseBackend *)enableQueryLogging:(BOOL)enable {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->enableQueryLogging(::djinni::Bool::toCpp(enable));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isLoggingEnabled {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isLoggingEnabled();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDatabaseBackend *)getSqlite3Backend {
    try {
        auto objcpp_result_ = ::ledger::core::api::DatabaseBackend::getSqlite3Backend();
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDatabaseBackend *)getPostgreSQLBackend:(int32_t)connectionPoolSize
                          readonlyConnectionPoolSize:(int32_t)readonlyConnectionPoolSize {
    try {
        auto objcpp_result_ = ::ledger::core::api::DatabaseBackend::getPostgreSQLBackend(::djinni::I32::toCpp(connectionPoolSize),
                                                                                         ::djinni::I32::toCpp(readonlyConnectionPoolSize));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGDatabaseBackend *)createBackendFromEngine:(nullable id<LGDatabaseEngine>)engine {
    try {
        auto objcpp_result_ = ::ledger::core::api::DatabaseBackend::createBackendFromEngine(::djinni_generated::DatabaseEngine::toCpp(engine));
        return ::djinni_generated::DatabaseBackend::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DatabaseBackend::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DatabaseBackend::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGDatabaseBackend>(cpp);
}

}  // namespace djinni_generated

@end
