// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "LGOperationQuery+Private.h"
#import "LGOperationQuery.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGOperationListCallback+Private.h"
#import "LGOperationOrderKey+Private.h"
#import "LGQueryFilter+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGOperationQuery ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::OperationQuery>&)cppRef;

@end

@implementation LGOperationQuery {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::OperationQuery>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::OperationQuery>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable LGOperationQuery *)addOrder:(LGOperationOrderKey)key
                             descending:(BOOL)descending {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->addOrder(::djinni::Enum<::ledger::core::api::OperationOrderKey, LGOperationOrderKey>::toCpp(key),
                                                            ::djinni::Bool::toCpp(descending));
        return ::djinni_generated::OperationQuery::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGQueryFilter *)filter {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->filter();
        return ::djinni_generated::QueryFilter::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGOperationQuery *)offset:(int32_t)from {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->offset(::djinni::I32::toCpp(from));
        return ::djinni_generated::OperationQuery::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGOperationQuery *)limit:(int32_t)count {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->limit(::djinni::I32::toCpp(count));
        return ::djinni_generated::OperationQuery::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGOperationQuery *)complete {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->complete();
        return ::djinni_generated::OperationQuery::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGOperationQuery *)partial {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->partial();
        return ::djinni_generated::OperationQuery::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)execute:(nullable id<LGOperationListCallback>)callback {
    try {
        _cppRefHandle.get()->execute(::djinni_generated::OperationListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto OperationQuery::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto OperationQuery::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGOperationQuery>(cpp);
}

}  // namespace djinni_generated

@end
