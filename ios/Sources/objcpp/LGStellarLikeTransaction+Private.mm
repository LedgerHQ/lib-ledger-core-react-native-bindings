// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#import "LGStellarLikeTransaction+Private.h"
#import "LGStellarLikeTransaction.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAddress+Private.h"
#import "LGAmount+Private.h"
#import "LGBigInt+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGStellarLikeTransaction ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::StellarLikeTransaction>&)cppRef;

@end

@implementation LGStellarLikeTransaction {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::StellarLikeTransaction>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::StellarLikeTransaction>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSData *)toRawTransaction {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toRawTransaction();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)toSignatureBase {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toSignatureBase();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)putSignature:(nonnull NSData *)signature
             address:(nullable LGAddress *)address {
    try {
        _cppRefHandle.get()->putSignature(::djinni::Binary::toCpp(signature),
                                          ::djinni_generated::Address::toCpp(address));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAddress *)getSourceAccount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSourceAccount();
        return ::djinni_generated::Address::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBigInt *)getSourceAccountSequence {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSourceAccountSequence();
        return ::djinni_generated::BigInt::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)getFee {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getFee();
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto StellarLikeTransaction::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto StellarLikeTransaction::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGStellarLikeTransaction>(cpp);
}

}  // namespace djinni_generated

@end
