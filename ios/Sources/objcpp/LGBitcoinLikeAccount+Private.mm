// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "LGBitcoinLikeAccount+Private.h"
#import "LGBitcoinLikeAccount.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAddressListCallback+Private.h"
#import "LGBigIntListCallback+Private.h"
#import "LGBitcoinLikeOutputListCallback+Private.h"
#import "LGBitcoinLikeTransaction+Private.h"
#import "LGBitcoinLikeTransactionBuilder+Private.h"
#import "LGI32Callback+Private.h"
#import "LGStringCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGBitcoinLikeAccount ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeAccount>&)cppRef;

@end

@implementation LGBitcoinLikeAccount {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::BitcoinLikeAccount>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeAccount>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)getUTXO:(int32_t)from
             to:(int32_t)to
       callback:(nullable id<LGBitcoinLikeOutputListCallback>)callback {
    try {
        _cppRefHandle.get()->getUTXO(::djinni::I32::toCpp(from),
                                     ::djinni::I32::toCpp(to),
                                     ::djinni_generated::BitcoinLikeOutputListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getUTXOCount:(nullable id<LGI32Callback>)callback {
    try {
        _cppRefHandle.get()->getUTXOCount(::djinni_generated::I32Callback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)broadcastRawTransaction:(nonnull NSData *)transaction
                       callback:(nullable id<LGStringCallback>)callback {
    try {
        _cppRefHandle.get()->broadcastRawTransaction(::djinni::Binary::toCpp(transaction),
                                                     ::djinni_generated::StringCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)broadcastTransaction:(nullable LGBitcoinLikeTransaction *)transaction
                    callback:(nullable id<LGStringCallback>)callback {
    try {
        _cppRefHandle.get()->broadcastTransaction(::djinni_generated::BitcoinLikeTransaction::toCpp(transaction),
                                                  ::djinni_generated::StringCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBitcoinLikeTransactionBuilder *)buildTransaction:(nullable NSNumber *)partial {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->buildTransaction(::djinni::Optional<std::experimental::optional, ::djinni::Bool>::toCpp(partial));
        return ::djinni_generated::BitcoinLikeTransactionBuilder::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getFees:(nullable id<LGBigIntListCallback>)callback {
    try {
        _cppRefHandle.get()->getFees(::djinni_generated::BigIntListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getAddresses:(int64_t)from
                  to:(int64_t)to
            callback:(nullable id<LGAddressListCallback>)callback {
    try {
        _cppRefHandle.get()->getAddresses(::djinni::I64::toCpp(from),
                                          ::djinni::I64::toCpp(to),
                                          ::djinni_generated::AddressListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto BitcoinLikeAccount::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto BitcoinLikeAccount::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGBitcoinLikeAccount>(cpp);
}

}  // namespace djinni_generated

@end
