// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#import "LGPreferencesBackend+Private.h"
#import "LGPreferencesBackend.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGPreferencesChange+Private.h"
#import "LGRandomNumberGenerator+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGPreferencesBackend ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::PreferencesBackend>&)cppRef;

@end

@implementation LGPreferencesBackend {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::PreferencesBackend>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::PreferencesBackend>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable NSData *)get:(nonnull NSData *)key {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get(::djinni::Binary::toCpp(key));
        return ::djinni::Optional<std::experimental::optional, ::djinni::Binary>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)commit:(nonnull NSArray<LGPreferencesChange *> *)changes {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->commit(::djinni::List<::djinni_generated::PreferencesChange>::toCpp(changes));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setEncryption:(nullable id<LGRandomNumberGenerator>)rng
             password:(nonnull NSString *)password {
    try {
        _cppRefHandle.get()->setEncryption(::djinni_generated::RandomNumberGenerator::toCpp(rng),
                                           ::djinni::String::toCpp(password));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unsetEncryption {
    try {
        _cppRefHandle.get()->unsetEncryption();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)resetEncryption:(nullable id<LGRandomNumberGenerator>)rng
            oldPassword:(nonnull NSString *)oldPassword
            newPassword:(nonnull NSString *)newPassword {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->resetEncryption(::djinni_generated::RandomNumberGenerator::toCpp(rng),
                                                                   ::djinni::String::toCpp(oldPassword),
                                                                   ::djinni::String::toCpp(newPassword));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getEncryptionSalt {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getEncryptionSalt();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clear {
    try {
        _cppRefHandle.get()->clear();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto PreferencesBackend::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto PreferencesBackend::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGPreferencesBackend>(cpp);
}

}  // namespace djinni_generated

@end
