// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#import "LGPreferencesBackend+Private.h"
#import "LGPreferencesBackend.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "LGPreferencesChange+Private.h"
#import "LGRandomNumberGenerator+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class PreferencesBackend::ObjcProxy final
: public ::ledger::core::api::PreferencesBackend
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::PreferencesBackend;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::experimental::optional<std::vector<uint8_t>> get(const std::vector<uint8_t> & c_key) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() get:(::djinni::Binary::fromCpp(c_key))];
            return ::djinni::Optional<std::experimental::optional, ::djinni::Binary>::toCpp(objcpp_result_);
        }
    }
    bool commit(const std::vector<::ledger::core::api::PreferencesChange> & c_changes) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() commit:(::djinni::List<::djinni_generated::PreferencesChange>::fromCpp(c_changes))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    void setEncryption(const std::shared_ptr<::ledger::core::api::RandomNumberGenerator> & c_rng, const std::string & c_password) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setEncryption:(::djinni_generated::RandomNumberGenerator::fromCpp(c_rng))
                                                           password:(::djinni::String::fromCpp(c_password))];
        }
    }
    void unsetEncryption() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() unsetEncryption];
        }
    }
    bool resetEncryption(const std::shared_ptr<::ledger::core::api::RandomNumberGenerator> & c_rng, const std::string & c_oldPassword, const std::string & c_newPassword) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() resetEncryption:(::djinni_generated::RandomNumberGenerator::fromCpp(c_rng))
                                                                                oldPassword:(::djinni::String::fromCpp(c_oldPassword))
                                                                                newPassword:(::djinni::String::fromCpp(c_newPassword))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    std::string getEncryptionSalt() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getEncryptionSalt];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    void clear() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() clear];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto PreferencesBackend::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto PreferencesBackend::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
