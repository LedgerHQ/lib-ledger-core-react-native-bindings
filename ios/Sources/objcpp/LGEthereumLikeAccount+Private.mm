// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#import "LGEthereumLikeAccount+Private.h"
#import "LGEthereumLikeAccount.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGBigIntCallback+Private.h"
#import "LGBigIntListCallback+Private.h"
#import "LGERC20LikeAccount+Private.h"
#import "LGEthereumGasLimitRequest+Private.h"
#import "LGEthereumLikeTransaction+Private.h"
#import "LGEthereumLikeTransactionBuilder+Private.h"
#import "LGStringCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGEthereumLikeAccount ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EthereumLikeAccount>&)cppRef;

@end

@implementation LGEthereumLikeAccount {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::EthereumLikeAccount>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EthereumLikeAccount>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)broadcastRawTransaction:(nonnull NSData *)transaction
                       callback:(nullable id<LGStringCallback>)callback {
    try {
        _cppRefHandle.get()->broadcastRawTransaction(::djinni::Binary::toCpp(transaction),
                                                     ::djinni_generated::StringCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)broadcastTransaction:(nullable LGEthereumLikeTransaction *)transaction
                    callback:(nullable id<LGStringCallback>)callback {
    try {
        _cppRefHandle.get()->broadcastTransaction(::djinni_generated::EthereumLikeTransaction::toCpp(transaction),
                                                  ::djinni_generated::StringCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGEthereumLikeTransactionBuilder *)buildTransaction {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->buildTransaction();
        return ::djinni_generated::EthereumLikeTransactionBuilder::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<LGERC20LikeAccount *> *)getERC20Accounts {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getERC20Accounts();
        return ::djinni::List<::djinni_generated::ERC20LikeAccount>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getGasPrice:(nullable id<LGBigIntCallback>)callback {
    try {
        _cppRefHandle.get()->getGasPrice(::djinni_generated::BigIntCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getEstimatedGasLimit:(nonnull NSString *)address
                    callback:(nullable id<LGBigIntCallback>)callback {
    try {
        _cppRefHandle.get()->getEstimatedGasLimit(::djinni::String::toCpp(address),
                                                  ::djinni_generated::BigIntCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getDryRunGasLimit:(nonnull NSString *)address
                  request:(nonnull LGEthereumGasLimitRequest *)request
                 callback:(nullable id<LGBigIntCallback>)callback {
    try {
        _cppRefHandle.get()->getDryRunGasLimit(::djinni::String::toCpp(address),
                                               ::djinni_generated::EthereumGasLimitRequest::toCpp(request),
                                               ::djinni_generated::BigIntCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getERC20Balance:(nonnull NSString *)erc20Address
               callback:(nullable id<LGBigIntCallback>)callback {
    try {
        _cppRefHandle.get()->getERC20Balance(::djinni::String::toCpp(erc20Address),
                                             ::djinni_generated::BigIntCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getERC20Balances:(nonnull NSArray<NSString *> *)erc20Addresses
                callback:(nullable id<LGBigIntListCallback>)callback {
    try {
        _cppRefHandle.get()->getERC20Balances(::djinni::List<::djinni::String>::toCpp(erc20Addresses),
                                              ::djinni_generated::BigIntListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto EthereumLikeAccount::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto EthereumLikeAccount::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGEthereumLikeAccount>(cpp);
}

}  // namespace djinni_generated

@end
