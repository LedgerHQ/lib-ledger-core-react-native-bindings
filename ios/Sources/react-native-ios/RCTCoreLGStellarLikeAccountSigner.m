// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#import "RCTCoreLGStellarLikeAccountSigner.h"
#import "LGStellarLikeAccountSigner.h"

@implementation RCTCoreLGStellarLikeAccountSigner

//Export module
RCT_EXPORT_MODULE(RCTCoreLGStellarLikeAccountSigner)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithKey:(nonnull NSString *)key
                              type:(nonnull NSString *)type
                            weight:(int)weight withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {


    LGStellarLikeAccountSigner * finalResult = [[LGStellarLikeAccountSigner alloc] initWithKey:key type:type weight:weight];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeAccountSigner *rctImpl = (RCTCoreLGStellarLikeAccountSigner *)[self.bridge moduleForName:@"CoreLGStellarLikeAccountSigner"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeAccountSigner", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getKey, getKey:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeAccountSigner *objcImpl = (LGStellarLikeAccountSigner *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.key};
    resolve(result);
}

RCT_REMAP_METHOD(getType, getType:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeAccountSigner *objcImpl = (LGStellarLikeAccountSigner *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.type};
    resolve(result);
}

RCT_REMAP_METHOD(getWeight, getWeight:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeAccountSigner *objcImpl = (LGStellarLikeAccountSigner *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.weight)};
    resolve(result);
}

@end
