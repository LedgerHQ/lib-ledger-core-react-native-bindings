// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#import "RCTCoreLGStellarLikeTransactionBuilder.h"


@implementation RCTCoreLGStellarLikeTransactionBuilder
//Export module
RCT_EXPORT_MODULE(RCTCoreLGStellarLikeTransactionBuilder)

@synthesize bridge = _bridge;


+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
-(NSData *) hexStringToData: (NSString *)hexString 
{
    NSMutableData *data= [[NSMutableData alloc] init];
    unsigned char byte;
    char byteChars[3] = {'\0','\0','\0'};
    for (int i = 0; i < ([hexString length] / 2); i++)
    {
        byteChars[0] = [hexString characterAtIndex: i*2];
        byteChars[1] = [hexString characterAtIndex: i*2 + 1];
        byte = strtol(byteChars, NULL, 16);
        [data appendBytes:&byte length:1];
    }
    return data;
}
-(NSString *) dataToHexString: (NSData *)data 
{
    const unsigned char *bytes = (const unsigned char *)data.bytes;
    NSMutableString *hex = [NSMutableString new];
    for (NSInteger i = 0; i < data.length; i++)
    {
        [hex appendFormat:@"%02x", bytes[i]];
    }
    return [hex copy];
}

RCT_REMAP_METHOD(addNativePayment,addNativePayment:(NSDictionary *)currentInstance withParams:(nonnull NSString *)address
                                                                                       amount:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::addNativePayment, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::addNativePayment, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGAmount *rctParam_amount = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *objcParam_1 = (LGAmount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj addNativePayment:address amount:objcParam_1];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::addNativePayment", nil);
        return;
    }

}

RCT_REMAP_METHOD(addCreateAccount,addCreateAccount:(NSDictionary *)currentInstance withParams:(nonnull NSString *)address
                                                                                       amount:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::addCreateAccount, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::addCreateAccount, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGAmount *rctParam_amount = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *objcParam_1 = (LGAmount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj addCreateAccount:address amount:objcParam_1];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::addCreateAccount", nil);
        return;
    }

}

RCT_REMAP_METHOD(setBaseFee,setBaseFee:(NSDictionary *)currentInstance withParams:(NSDictionary *)baseFee withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::setBaseFee, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::setBaseFee, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGAmount *rctParam_baseFee = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *objcParam_0 = (LGAmount *)[rctParam_baseFee.objcImplementations objectForKey:baseFee[@"uid"]];
    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj setBaseFee:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::setBaseFee", nil);
        return;
    }

}

RCT_REMAP_METHOD(setTextMemo,setTextMemo:(NSDictionary *)currentInstance withParams:(nonnull NSString *)text withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::setTextMemo, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::setTextMemo, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj setTextMemo:text];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::setTextMemo", nil);
        return;
    }

}

RCT_REMAP_METHOD(setNumberMemo,setNumberMemo:(NSDictionary *)currentInstance withParams:(NSDictionary *)number withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::setNumberMemo, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::setNumberMemo, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGBigInt *rctParam_number = (RCTCoreLGBigInt *)[self.bridge moduleForName:@"CoreLGBigInt"];
    LGBigInt *objcParam_0 = (LGBigInt *)[rctParam_number.objcImplementations objectForKey:number[@"uid"]];
    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj setNumberMemo:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::setNumberMemo", nil);
        return;
    }

}

RCT_REMAP_METHOD(setHashMemo,setHashMemo:(NSDictionary *)currentInstance withParams:(NSString *)hash withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::setHashMemo, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::setHashMemo, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSData *objcParam_0 = [self hexStringToData:hash];

    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj setHashMemo:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::setHashMemo", nil);
        return;
    }

}

RCT_REMAP_METHOD(setReturnMemo,setReturnMemo:(NSDictionary *)currentInstance withParams:(NSString *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::setReturnMemo, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::setReturnMemo, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSData *objcParam_0 = [self hexStringToData:value];

    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj setReturnMemo:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::setReturnMemo", nil);
        return;
    }

}

RCT_REMAP_METHOD(setSequence,setSequence:(NSDictionary *)currentInstance withParams:(NSDictionary *)sequence withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::setSequence, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::setSequence, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGBigInt *rctParam_sequence = (RCTCoreLGBigInt *)[self.bridge moduleForName:@"CoreLGBigInt"];
    LGBigInt *objcParam_0 = (LGBigInt *)[rctParam_sequence.objcImplementations objectForKey:sequence[@"uid"]];
    LGStellarLikeTransactionBuilder * objcResult = [currentInstanceObj setSequence:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGStellarLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGStellarLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::setSequence", nil);
        return;
    }

}

RCT_REMAP_METHOD(build,build:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGStellarLikeTransactionBuilder::build, first argument should be an instance of LGStellarLikeTransactionBuilder", nil);
        return;
    }
    LGStellarLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGStellarLikeTransactionBuilder::build, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGStellarLikeTransactionCallback *objcParam_0 = [[RCTCoreLGStellarLikeTransactionCallback alloc] initWithResolver:resolve rejecter:reject andBridge:self.bridge];
    [currentInstanceObj build:objcParam_0];

}

RCT_REMAP_METHOD(parseRawTransaction,parseRawTransactionwithParams:(NSDictionary *)currency
                                                    rawTransaction:(NSString *)rawTransaction withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCurrency *rctParam_currency = (RCTCoreLGCurrency *)[self.bridge moduleForName:@"CoreLGCurrency"];
    LGCurrency *objcParam_0 = (LGCurrency *)[rctParam_currency.objcImplementations objectForKey:currency[@"uid"]];
    NSData *objcParam_1 = [self hexStringToData:rawTransaction];

    LGStellarLikeTransaction * objcResult = [LGStellarLikeTransactionBuilder parseRawTransaction:objcParam_0 rawTransaction:objcParam_1];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransaction *rctImpl_objcResult = (RCTCoreLGStellarLikeTransaction *)[self.bridge moduleForName:@"CoreLGStellarLikeTransaction"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransaction", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::parseRawTransaction", nil);
        return;
    }

}

RCT_REMAP_METHOD(parseSignatureBase,parseSignatureBasewithParams:(NSDictionary *)currency
                                                  rawTransaction:(NSString *)rawTransaction withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCurrency *rctParam_currency = (RCTCoreLGCurrency *)[self.bridge moduleForName:@"CoreLGCurrency"];
    LGCurrency *objcParam_0 = (LGCurrency *)[rctParam_currency.objcImplementations objectForKey:currency[@"uid"]];
    NSData *objcParam_1 = [self hexStringToData:rawTransaction];

    LGStellarLikeTransaction * objcResult = [LGStellarLikeTransactionBuilder parseSignatureBase:objcParam_0 rawTransaction:objcParam_1];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeTransaction *rctImpl_objcResult = (RCTCoreLGStellarLikeTransaction *)[self.bridge moduleForName:@"CoreLGStellarLikeTransaction"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeTransaction", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGStellarLikeTransactionBuilder::parseSignatureBase", nil);
        return;
    }

}
@end
