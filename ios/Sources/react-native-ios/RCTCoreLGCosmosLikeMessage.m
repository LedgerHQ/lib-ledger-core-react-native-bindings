// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "RCTCoreLGCosmosLikeMessage.h"


@implementation RCTCoreLGCosmosLikeMessage
//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeMessage)

@synthesize bridge = _bridge;


+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}

/**
 * Get type
 * @return CosmosLikeMsgType a message type
 */
RCT_REMAP_METHOD(getMessageType,getMessageType:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeMessage::getMessageType, first argument should be an instance of LGCosmosLikeMessage", nil);
        return;
    }
    LGCosmosLikeMessage *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeMessage::getMessageType, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGCosmosLikeMsgType objcResult = [currentInstanceObj getMessageType];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::getMessageType", nil);
        return;
    }

}

/**
 * Get type
 * @return string a message type in string format
 */
RCT_REMAP_METHOD(getRawMessageType,getRawMessageType:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeMessage::getRawMessageType, first argument should be an instance of LGCosmosLikeMessage", nil);
        return;
    }
    LGCosmosLikeMessage *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeMessage::getRawMessageType, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSString * objcResult = [currentInstanceObj getRawMessageType];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::getRawMessageType", nil);
        return;
    }

}

/**
 * Get type
 * @return bool if the message was successfully executed on the chain
 */
RCT_REMAP_METHOD(getSuccess,getSuccess:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeMessage::getSuccess, first argument should be an instance of LGCosmosLikeMessage", nil);
        return;
    }
    LGCosmosLikeMessage *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeMessage::getSuccess, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    BOOL objcResult = [currentInstanceObj getSuccess];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::getSuccess", nil);
        return;
    }

}

/**
 * Get type
 * @return string the log of the message execution (useful when getSuccess() == false)
 */
RCT_REMAP_METHOD(getLog,getLog:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeMessage::getLog, first argument should be an instance of LGCosmosLikeMessage", nil);
        return;
    }
    LGCosmosLikeMessage *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeMessage::getLog, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSString * objcResult = [currentInstanceObj getLog];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::getLog", nil);
        return;
    }

}

/**
 * Get message index in the tx
 * @return string the 0-based index in the tx or "fees" for the fees in the tx
 */
RCT_REMAP_METHOD(getIndex,getIndex:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeMessage::getIndex, first argument should be an instance of LGCosmosLikeMessage", nil);
        return;
    }
    LGCosmosLikeMessage *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeMessage::getIndex, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSString * objcResult = [currentInstanceObj getIndex];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::getIndex", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgSend into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgSend,wrapMsgSendwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgSend *rctParam_msg = (RCTCoreLGCosmosLikeMsgSend *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgSend"];
    LGCosmosLikeMsgSend *objcParam_0 = (LGCosmosLikeMsgSend *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgSend:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgSend", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgSend
 * @param msg The message to unwrap
 * @return CosmosLikeMsgDelegate the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgSend,unwrapMsgSendwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgSend * objcResult = [LGCosmosLikeMessage unwrapMsgSend:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgSend *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgSend *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgSend"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgSend", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgSend", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgDelegate into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgDelegate,wrapMsgDelegatewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgDelegate *rctParam_msg = (RCTCoreLGCosmosLikeMsgDelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgDelegate"];
    LGCosmosLikeMsgDelegate *objcParam_0 = (LGCosmosLikeMsgDelegate *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgDelegate:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgDelegate", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgDelegate
 * @param msg The message to unwrap
 * @return CosmosLikeMsgDelegate the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgDelegate,unwrapMsgDelegatewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgDelegate * objcResult = [LGCosmosLikeMessage unwrapMsgDelegate:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgDelegate *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgDelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgDelegate"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgDelegate", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgDelegate", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgUndelegate into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgUndelegate,wrapMsgUndelegatewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgUndelegate *rctParam_msg = (RCTCoreLGCosmosLikeMsgUndelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgUndelegate"];
    LGCosmosLikeMsgUndelegate *objcParam_0 = (LGCosmosLikeMsgUndelegate *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgUndelegate:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgUndelegate", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgUndelegate
 * @param msg The message to unwrap
 * @return CosmosLikeMsgUndelegate the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgUndelegate,unwrapMsgUndelegatewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgUndelegate * objcResult = [LGCosmosLikeMessage unwrapMsgUndelegate:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgUndelegate *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgUndelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgUndelegate"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgUndelegate", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgUndelegate", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgBeginRedelegate into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgBeginRedelegate,wrapMsgBeginRedelegatewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgBeginRedelegate *rctParam_msg = (RCTCoreLGCosmosLikeMsgBeginRedelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgBeginRedelegate"];
    LGCosmosLikeMsgBeginRedelegate *objcParam_0 = (LGCosmosLikeMsgBeginRedelegate *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgBeginRedelegate:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgBeginRedelegate", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgBeginRedelegate
 * @param msg The message to unwrap
 * @return CosmosLikeMsgBeginRedelegate the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgBeginRedelegate,unwrapMsgBeginRedelegatewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgBeginRedelegate * objcResult = [LGCosmosLikeMessage unwrapMsgBeginRedelegate:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgBeginRedelegate *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgBeginRedelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgBeginRedelegate"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgBeginRedelegate", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgBeginRedelegate", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgSubmitProposal into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgSubmitProposal,wrapMsgSubmitProposalwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgSubmitProposal *rctParam_msg = (RCTCoreLGCosmosLikeMsgSubmitProposal *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgSubmitProposal"];
    LGCosmosLikeMsgSubmitProposal *objcParam_0 = (LGCosmosLikeMsgSubmitProposal *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgSubmitProposal:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgSubmitProposal", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgSubmitProposal
 * @param msg The message to unwrap
 * @return CosmosLikeMsgSubmitProposal the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgSubmitProposal,unwrapMsgSubmitProposalwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgSubmitProposal * objcResult = [LGCosmosLikeMessage unwrapMsgSubmitProposal:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgSubmitProposal *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgSubmitProposal *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgSubmitProposal"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgSubmitProposal", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgSubmitProposal", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgVote into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgVote,wrapMsgVotewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgVote *rctParam_msg = (RCTCoreLGCosmosLikeMsgVote *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgVote"];
    LGCosmosLikeMsgVote *objcParam_0 = (LGCosmosLikeMsgVote *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgVote:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgVote", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgVote
 * @param msg The message to unwrap
 * @return CosmosLikeMsgVote the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgVote,unwrapMsgVotewithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgVote * objcResult = [LGCosmosLikeMessage unwrapMsgVote:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgVote *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgVote *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgVote"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgVote", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgVote", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgDeposit into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgDeposit,wrapMsgDepositwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgDeposit *rctParam_msg = (RCTCoreLGCosmosLikeMsgDeposit *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgDeposit"];
    LGCosmosLikeMsgDeposit *objcParam_0 = (LGCosmosLikeMsgDeposit *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgDeposit:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgDeposit", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgDeposit
 * @param msg The message to unwrap
 * @return CosmosLikeMsgDeposit the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgDeposit,unwrapMsgDepositwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgDeposit * objcResult = [LGCosmosLikeMessage unwrapMsgDeposit:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgDeposit *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgDeposit *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgDeposit"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgDeposit", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgDeposit", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgWithdrawDelegationReward into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgWithdrawDelegationReward,wrapMsgWithdrawDelegationRewardwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgWithdrawDelegationReward *rctParam_msg = (RCTCoreLGCosmosLikeMsgWithdrawDelegationReward *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgWithdrawDelegationReward"];
    LGCosmosLikeMsgWithdrawDelegationReward *objcParam_0 = (LGCosmosLikeMsgWithdrawDelegationReward *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgWithdrawDelegationReward:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgWithdrawDelegationReward", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgWithdrawDelegationReward
 * @param msg The message to unwrap
 * @return CosmosLikeMsgWithdrawDelegationReward the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgWithdrawDelegationReward,unwrapMsgWithdrawDelegationRewardwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgWithdrawDelegationReward * objcResult = [LGCosmosLikeMessage unwrapMsgWithdrawDelegationReward:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgWithdrawDelegationReward *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgWithdrawDelegationReward *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgWithdrawDelegationReward"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgWithdrawDelegationReward", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgWithdrawDelegationReward", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgMultiSend into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgMultiSend,wrapMsgMultiSendwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgMultiSend *rctParam_msg = (RCTCoreLGCosmosLikeMsgMultiSend *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgMultiSend"];
    LGCosmosLikeMsgMultiSend *objcParam_0 = (LGCosmosLikeMsgMultiSend *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgMultiSend:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgMultiSend", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgMultiSend
 * @param msg The message to unwrap
 * @return CosmosLikeMsgMultiSend the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgMultiSend,unwrapMsgMultiSendwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgMultiSend * objcResult = [LGCosmosLikeMessage unwrapMsgMultiSend:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgMultiSend *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgMultiSend *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgMultiSend"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgMultiSend", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgMultiSend", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgCreateValidator into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgCreateValidator,wrapMsgCreateValidatorwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgCreateValidator *rctParam_msg = (RCTCoreLGCosmosLikeMsgCreateValidator *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgCreateValidator"];
    LGCosmosLikeMsgCreateValidator *objcParam_0 = (LGCosmosLikeMsgCreateValidator *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgCreateValidator:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgCreateValidator", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgCreateValidator
 * @param msg The message to unwrap
 * @return CosmosLikeMsgCreateValidator the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgCreateValidator,unwrapMsgCreateValidatorwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgCreateValidator * objcResult = [LGCosmosLikeMessage unwrapMsgCreateValidator:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgCreateValidator *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgCreateValidator *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgCreateValidator"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgCreateValidator", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgCreateValidator", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgEditValidator into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgEditValidator,wrapMsgEditValidatorwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgEditValidator *rctParam_msg = (RCTCoreLGCosmosLikeMsgEditValidator *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgEditValidator"];
    LGCosmosLikeMsgEditValidator *objcParam_0 = (LGCosmosLikeMsgEditValidator *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgEditValidator:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgEditValidator", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgEditValidator
 * @param msg The message to unwrap
 * @return CosmosLikeMsgEditValidator the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgEditValidator,unwrapMsgEditValidatorwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgEditValidator * objcResult = [LGCosmosLikeMessage unwrapMsgEditValidator:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgEditValidator *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgEditValidator *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgEditValidator"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgEditValidator", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgEditValidator", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgSetWithdrawAddress into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgSetWithdrawAddress,wrapMsgSetWithdrawAddresswithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgSetWithdrawAddress *rctParam_msg = (RCTCoreLGCosmosLikeMsgSetWithdrawAddress *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgSetWithdrawAddress"];
    LGCosmosLikeMsgSetWithdrawAddress *objcParam_0 = (LGCosmosLikeMsgSetWithdrawAddress *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgSetWithdrawAddress:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgSetWithdrawAddress", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgSetWithdrawAddress
 * @param msg The message to unwrap
 * @return CosmosLikeMsgSetWithdrawAddress the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgSetWithdrawAddress,unwrapMsgSetWithdrawAddresswithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgSetWithdrawAddress * objcResult = [LGCosmosLikeMessage unwrapMsgSetWithdrawAddress:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgSetWithdrawAddress *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgSetWithdrawAddress *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgSetWithdrawAddress"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgSetWithdrawAddress", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgSetWithdrawAddress", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgWithdrawDelegatorReward into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgWithdrawDelegatorReward,wrapMsgWithdrawDelegatorRewardwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgWithdrawDelegatorReward *rctParam_msg = (RCTCoreLGCosmosLikeMsgWithdrawDelegatorReward *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgWithdrawDelegatorReward"];
    LGCosmosLikeMsgWithdrawDelegatorReward *objcParam_0 = (LGCosmosLikeMsgWithdrawDelegatorReward *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgWithdrawDelegatorReward:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgWithdrawDelegatorReward", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgWithdrawDelegatorReward
 * @param msg The message to unwrap
 * @return CosmosLikeMsgWithdrawDelegatorReward the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgWithdrawDelegatorReward,unwrapMsgWithdrawDelegatorRewardwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgWithdrawDelegatorReward * objcResult = [LGCosmosLikeMessage unwrapMsgWithdrawDelegatorReward:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgWithdrawDelegatorReward *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgWithdrawDelegatorReward *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgWithdrawDelegatorReward"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgWithdrawDelegatorReward", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgWithdrawDelegatorReward", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgWithdrawValidatorCommission into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgWithdrawValidatorCommission,wrapMsgWithdrawValidatorCommissionwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgWithdrawValidatorCommission *rctParam_msg = (RCTCoreLGCosmosLikeMsgWithdrawValidatorCommission *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgWithdrawValidatorCommission"];
    LGCosmosLikeMsgWithdrawValidatorCommission *objcParam_0 = (LGCosmosLikeMsgWithdrawValidatorCommission *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgWithdrawValidatorCommission:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgWithdrawValidatorCommission", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgWithdrawValidatorCommission
 * @param msg The message to unwrap
 * @return CosmosLikeMsgWithdrawValidatorCommission the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgWithdrawValidatorCommission,unwrapMsgWithdrawValidatorCommissionwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgWithdrawValidatorCommission * objcResult = [LGCosmosLikeMessage unwrapMsgWithdrawValidatorCommission:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgWithdrawValidatorCommission *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgWithdrawValidatorCommission *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgWithdrawValidatorCommission"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgWithdrawValidatorCommission", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgWithdrawValidatorCommission", nil);
        return;
    }

}

/**
 * Wrap the given CosmosLikeMsgUnjail into a CosmosLikeMessage
 * @param msg The message you need to wrap.
 * @return CosmosLikeMessage A wrapped message.
 */
RCT_REMAP_METHOD(wrapMsgUnjail,wrapMsgUnjailwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMsgUnjail *rctParam_msg = (RCTCoreLGCosmosLikeMsgUnjail *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgUnjail"];
    LGCosmosLikeMsgUnjail *objcParam_0 = (LGCosmosLikeMsgUnjail *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMessage * objcResult = [LGCosmosLikeMessage wrapMsgUnjail:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMessage *rctImpl_objcResult = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMessage", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::wrapMsgUnjail", nil);
        return;
    }

}

/**
 * Unwrap a message to a CosmosLikeMsgUnjail
 * @param msg The message to unwrap
 * @return CosmosLikeMsgUnjail the unwrapped message
 */
RCT_REMAP_METHOD(unwrapMsgUnjail,unwrapMsgUnjailwithParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeMsgUnjail * objcResult = [LGCosmosLikeMessage unwrapMsgUnjail:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgUnjail *rctImpl_objcResult = (RCTCoreLGCosmosLikeMsgUnjail *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgUnjail"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgUnjail", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeMessage::unwrapMsgUnjail", nil);
        return;
    }

}
@end
