// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#import "RCTCoreLGDatabaseResultRow.h"


@implementation RCTCoreLGDatabaseResultRow
//Export module
RCT_EXPORT_MODULE(RCTCoreLGDatabaseResultRow)

@synthesize bridge = _bridge;


+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}

/**
 * Check if the value is NULL at the given position.
 * @return true if the value is NULL, false otherwise.
 */
RCT_REMAP_METHOD(isNullAtPos,isNullAtPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::isNullAtPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::isNullAtPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    BOOL objcResult = [currentInstanceObj isNullAtPos:pos];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::isNullAtPos", nil);
        return;
    }

}

/**
 * Get the column name at the given position.
 * @return the column name.
 */
RCT_REMAP_METHOD(getColumnName,getColumnName:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getColumnName, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getColumnName, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSString * objcResult = [currentInstanceObj getColumnName:pos];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getColumnName", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getShortByPos,getShortByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getShortByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getShortByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSInteger objcResult = [currentInstanceObj getShortByPos:pos];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getShortByPos", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getIntByPos,getIntByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getIntByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getIntByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSInteger objcResult = [currentInstanceObj getIntByPos:pos];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getIntByPos", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getFloatByPos,getFloatByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getFloatByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getFloatByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    float objcResult = [currentInstanceObj getFloatByPos:pos];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getFloatByPos", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getDoubleByPos,getDoubleByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getDoubleByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getDoubleByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    double objcResult = [currentInstanceObj getDoubleByPos:pos];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getDoubleByPos", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getLongByPos,getLongByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getLongByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getLongByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSInteger objcResult = [currentInstanceObj getLongByPos:pos];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getLongByPos", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getStringByPos,getStringByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getStringByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getStringByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSString * objcResult = [currentInstanceObj getStringByPos:pos];
    NSDictionary *result = @{@"value" : objcResult};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getStringByPos", nil);
        return;
    }

}

/**
 * Get the value at the given position. The underneath value has to be an 16bit integer otherwise this call will fail.
 * @return the value at the given position.
 */
RCT_REMAP_METHOD(getBlobByPos,getBlobByPos:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRow::getBlobByPos, first argument should be an instance of LGDatabaseResultRowImpl", nil);
        return;
    }
    LGDatabaseResultRowImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseResultRowImpl::getBlobByPos, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    id<LGDatabaseBlob> objcResult = [currentInstanceObj getBlobByPos:pos];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGDatabaseBlob *rctImpl_objcResult = (RCTCoreLGDatabaseBlob *)[self.bridge moduleForName:@"CoreLGDatabaseBlob"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGDatabaseBlob", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseResultRowImpl::getBlobByPos", nil);
        return;
    }

}
RCT_REMAP_METHOD(newInstance, newInstanceWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    LGDatabaseResultRowImpl *objcResult = [[LGDatabaseResultRowImpl alloc] init];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    NSArray *resultArray = [[NSArray alloc] initWithObjects:objcResult, uuid, nil];
    [self baseSetObject:resultArray];
    NSDictionary *result = @{@"type" : @"CoreLGDatabaseResultRowImpl", @"uid" : uuid };
    if (!objcResult || !result)
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseResultRowImpl::init", nil);
        return;
    }
    resolve(result);
}
@end
