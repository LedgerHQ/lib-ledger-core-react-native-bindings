// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

#import "RCTCoreLGStellarLikeFeeStats.h"
#import "LGStellarLikeFeeStats.h"

@implementation RCTCoreLGStellarLikeFeeStats

//Export module
RCT_EXPORT_MODULE(RCTCoreLGStellarLikeFeeStats)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithLastBaseFee:(int)lastBaseFee
                           modeAcceptedFee:(int)modeAcceptedFee
                               minAccepted:(int)minAccepted
                                    maxFee:(int)maxFee withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {


    LGStellarLikeFeeStats * finalResult = [[LGStellarLikeFeeStats alloc] initWithLastBaseFee:lastBaseFee modeAcceptedFee:modeAcceptedFee minAccepted:minAccepted maxFee:maxFee];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeFeeStats *rctImpl = (RCTCoreLGStellarLikeFeeStats *)[self.bridge moduleForName:@"CoreLGStellarLikeFeeStats"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeFeeStats", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getLastBaseFee, getLastBaseFee:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeFeeStats *objcImpl = (LGStellarLikeFeeStats *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.lastBaseFee)};
    resolve(result);
}

RCT_REMAP_METHOD(getModeAcceptedFee, getModeAcceptedFee:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeFeeStats *objcImpl = (LGStellarLikeFeeStats *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.modeAcceptedFee)};
    resolve(result);
}

RCT_REMAP_METHOD(getMinAccepted, getMinAccepted:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeFeeStats *objcImpl = (LGStellarLikeFeeStats *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.minAccepted)};
    resolve(result);
}

RCT_REMAP_METHOD(getMaxFee, getMaxFee:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeFeeStats *objcImpl = (LGStellarLikeFeeStats *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.maxFee)};
    resolve(result);
}

@end
