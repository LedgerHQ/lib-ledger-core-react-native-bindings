// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#import "RCTCoreLGEthereumGasLimitRequest.h"
#import "LGEthereumGasLimitRequest.h"

@implementation RCTCoreLGEthereumGasLimitRequest

//Export module
RCT_EXPORT_MODULE(RCTCoreLGEthereumGasLimitRequest)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithFrom:(nonnull NSString *)from
                                 to:(nonnull NSString *)to
                              value:(nonnull NSString *)value
                               data:(nonnull NSString *)data
                                gas:(nonnull NSString *)gas
                           gasPrice:(nonnull NSString *)gasPrice
                          amplifier:(nonnull NSNumber *)amplifier withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {


    LGEthereumGasLimitRequest * finalResult = [[LGEthereumGasLimitRequest alloc] initWithFrom:from to:to value:value data:data gas:gas gasPrice:gasPrice amplifier:amplifier];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGEthereumGasLimitRequest *rctImpl = (RCTCoreLGEthereumGasLimitRequest *)[self.bridge moduleForName:@"CoreLGEthereumGasLimitRequest"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGEthereumGasLimitRequest", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getFrom, getFrom:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.from};
    resolve(result);
}

RCT_REMAP_METHOD(getTo, getTo:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.to};
    resolve(result);
}

RCT_REMAP_METHOD(getValue, getValue:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.value};
    resolve(result);
}

RCT_REMAP_METHOD(getData, getData:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.data};
    resolve(result);
}

RCT_REMAP_METHOD(getGas, getGas:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.gas};
    resolve(result);
}

RCT_REMAP_METHOD(getGasPrice, getGasPrice:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.gasPrice};
    resolve(result);
}

RCT_REMAP_METHOD(getAmplifier, getAmplifier:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGEthereumGasLimitRequest *objcImpl = (LGEthereumGasLimitRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.amplifier};
    resolve(result);
}

@end
