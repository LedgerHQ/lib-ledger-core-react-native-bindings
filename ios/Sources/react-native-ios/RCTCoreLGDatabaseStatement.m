// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#import "RCTCoreLGDatabaseStatement.h"


@implementation RCTCoreLGDatabaseStatement
//Export module
RCT_EXPORT_MODULE(RCTCoreLGDatabaseStatement)

@synthesize bridge = _bridge;


+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}

/**
 * Bind the designated parameter to the given 16bit integer value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindShort,bindShort:(NSDictionary *)currentInstance withParams:(int)pos
                                                                          value:(int)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindShort, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindShort, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindShort:pos value:value];
    resolve(@(YES));

}

/**
 * Bind the designated parameter to the given 32bit integer value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindInt,bindInt:(NSDictionary *)currentInstance withParams:(int)pos
                                                                      value:(int)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindInt, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindInt, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindInt:pos value:value];
    resolve(@(YES));

}

/**
 * Bind the designated parameter to the given 64bit integer value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindLong,bindLong:(NSDictionary *)currentInstance withParams:(int)pos
                                                                        value:(int)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindLong, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindLong, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindLong:pos value:value];
    resolve(@(YES));

}

/**
 * Bind the designated parameter to the given 32bit floating point number value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindFloat,bindFloat:(NSDictionary *)currentInstance withParams:(int)pos
                                                                          value:(float)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindFloat, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindFloat, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindFloat:pos value:value];
    resolve(@(YES));

}

/**
 * Bind the designated parameter to the given 64bit floating point number value.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindDouble,bindDouble:(NSDictionary *)currentInstance withParams:(int)pos
                                                                            value:(double)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindDouble, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindDouble, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindDouble:pos value:value];
    resolve(@(YES));

}

/**
 * Bind the designated parameter to the given string.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindString,bindString:(NSDictionary *)currentInstance withParams:(int)pos
                                                                            value:(nonnull NSString *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindString, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindString, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindString:pos value:value];
    resolve(@(YES));

}

/**
 * Bind the designated parameter to the given BLOB.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindBlob,bindBlob:(NSDictionary *)currentInstance withParams:(int)pos
                                                                        value:(NSDictionary *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindBlob, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindBlob, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGDatabaseBlob *rctParam_value = (RCTCoreLGDatabaseBlob *)[self.bridge moduleForName:@"CoreLGDatabaseBlob"];
    id<LGDatabaseBlob>objcParam_1 = (id<LGDatabaseBlob>)[rctParam_value.objcImplementations objectForKey:value[@"uid"]];
    LGDatabaseBlobImpl *objcParam_1_objc = (LGDatabaseBlobImpl *)objcParam_1;
    if (objcParam_1_objc)
    {
        objcParam_1_objc.resolve = resolve;
        objcParam_1_objc.reject = reject;
    }
    [currentInstanceObj bindBlob:pos value:objcParam_1];

}

/**
 * Bind the designated parameter to the NULL value in SQL.
 * @param pos The position of the parameter in the query
 * @param value The value to bind
 */
RCT_REMAP_METHOD(bindNull,bindNull:(NSDictionary *)currentInstance withParams:(int)pos withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::bindNull, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::bindNull, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj bindNull:pos];
    resolve(@(YES));

}

/**
 * Describe the metadata attached to the designated column (e.g. data type, column name...)
 * @return Column metadata descriptor
 */
RCT_REMAP_METHOD(describeColumn,describeColumn:(NSDictionary *)currentInstance withParams:(int)colNum withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::describeColumn, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::describeColumn, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    id<LGDatabaseColumn> objcResult = [currentInstanceObj describeColumn:colNum];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGDatabaseColumn *rctImpl_objcResult = (RCTCoreLGDatabaseColumn *)[self.bridge moduleForName:@"CoreLGDatabaseColumn"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGDatabaseColumn", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseStatementImpl::describeColumn", nil);
        return;
    }

}

/**
 * Get the number of column that will be available into the result row (e.g. "SELECT name, age FROM USERS"
 * would return 2).
 * @return The number of the columns available in the result
 */
RCT_REMAP_METHOD(getColumnCount,getColumnCount:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::getColumnCount, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::getColumnCount, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    NSInteger objcResult = [currentInstanceObj getColumnCount];
    NSDictionary *result = @{@"value" : @(objcResult)};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseStatementImpl::getColumnCount", nil);
        return;
    }

}

/**
 * Execute the statement with the past bound values.
 * @return The result of the execution of the statement on the database.
 */
RCT_REMAP_METHOD(execute,execute:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::execute, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::execute, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    id<LGDatabaseResultSet> objcResult = [currentInstanceObj execute];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGDatabaseResultSet *rctImpl_objcResult = (RCTCoreLGDatabaseResultSet *)[self.bridge moduleForName:@"CoreLGDatabaseResultSet"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGDatabaseResultSet", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGDatabaseStatementImpl::execute", nil);
        return;
    }

}

/** Reset all bindings. This call is used before reusing a statement instance in order to repeat it multiple time. */
RCT_REMAP_METHOD(reset,reset:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::reset, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::reset, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj reset];
    resolve(@(YES));

}

/** Close the statement and release all allocated resources. The statement shouldn't be used after this call. */
RCT_REMAP_METHOD(close,close:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatement::close, first argument should be an instance of LGDatabaseStatementImpl", nil);
        return;
    }
    LGDatabaseStatementImpl *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGDatabaseStatementImpl::close, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj close];
    resolve(@(YES));

}
RCT_REMAP_METHOD(newInstance, newInstanceWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    LGDatabaseStatementImpl *objcResult = [[LGDatabaseStatementImpl alloc] init];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    NSArray *resultArray = [[NSArray alloc] initWithObjects:objcResult, uuid, nil];
    [self baseSetObject:resultArray];
    NSDictionary *result = @{@"type" : @"CoreLGDatabaseStatementImpl", @"uid" : uuid };
    if (!objcResult || !result)
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGDatabaseStatementImpl::init", nil);
        return;
    }
    resolve(result);
}
@end
