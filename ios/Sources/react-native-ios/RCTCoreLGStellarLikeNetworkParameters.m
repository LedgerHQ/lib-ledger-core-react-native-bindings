// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from network.djinni

#import "RCTCoreLGStellarLikeNetworkParameters.h"
#import "LGStellarLikeNetworkParameters.h"

@implementation RCTCoreLGStellarLikeNetworkParameters

//Export module
RCT_EXPORT_MODULE(RCTCoreLGStellarLikeNetworkParameters)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
-(NSData *) hexStringToData: (NSString *)hexString 
{
    NSMutableData *data= [[NSMutableData alloc] init];
    unsigned char byte;
    char byteChars[3] = {'\0','\0','\0'};
    for (int i = 0; i < ([hexString length] / 2); i++)
    {
        byteChars[0] = [hexString characterAtIndex: i*2];
        byteChars[1] = [hexString characterAtIndex: i*2 + 1];
        byte = strtol(byteChars, NULL, 16);
        [data appendBytes:&byte length:1];
    }
    return data;
}
-(NSString *) dataToHexString: (NSData *)data 
{
    const unsigned char *bytes = (const unsigned char *)data.bytes;
    NSMutableString *hex = [NSMutableString new];
    for (NSInteger i = 0; i < data.length; i++)
    {
        [hex appendFormat:@"%02x", bytes[i]];
    }
    return [hex copy];
}
RCT_REMAP_METHOD(init, initWithIdentifier:(nonnull NSString *)Identifier
                                  Version:(NSString *)Version
                              BaseReserve:(int)BaseReserve
                                  BaseFee:(int)BaseFee
                           AdditionalSEPs:(nonnull NSArray<NSString *> *)AdditionalSEPs
                        NetworkPassphrase:(nonnull NSString *)NetworkPassphrase withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSData *field_1 = [self hexStringToData:Version];



    LGStellarLikeNetworkParameters * finalResult = [[LGStellarLikeNetworkParameters alloc] initWithIdentifier:Identifier Version:field_1 BaseReserve:BaseReserve BaseFee:BaseFee AdditionalSEPs:AdditionalSEPs NetworkPassphrase:NetworkPassphrase];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGStellarLikeNetworkParameters *rctImpl = (RCTCoreLGStellarLikeNetworkParameters *)[self.bridge moduleForName:@"CoreLGStellarLikeNetworkParameters"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGStellarLikeNetworkParameters", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getIdentifier, getIdentifier:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeNetworkParameters *objcImpl = (LGStellarLikeNetworkParameters *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.Identifier};
    resolve(result);
}

RCT_REMAP_METHOD(getVersion, getVersion:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeNetworkParameters *objcImpl = (LGStellarLikeNetworkParameters *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSString *objcImplVersionHexString = [self dataToHexString:objcImpl.Version];
    NSDictionary *result = @{@"value" : objcImplVersionHexString};
    resolve(result);
}

RCT_REMAP_METHOD(getBaseReserve, getBaseReserve:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeNetworkParameters *objcImpl = (LGStellarLikeNetworkParameters *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.BaseReserve)};
    resolve(result);
}

RCT_REMAP_METHOD(getBaseFee, getBaseFee:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeNetworkParameters *objcImpl = (LGStellarLikeNetworkParameters *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.BaseFee)};
    resolve(result);
}

RCT_REMAP_METHOD(getAdditionalSEPs, getAdditionalSEPs:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeNetworkParameters *objcImpl = (LGStellarLikeNetworkParameters *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.AdditionalSEPs};
    resolve(result);
}

RCT_REMAP_METHOD(getNetworkPassphrase, getNetworkPassphrase:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGStellarLikeNetworkParameters *objcImpl = (LGStellarLikeNetworkParameters *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.NetworkPassphrase};
    resolve(result);
}

@end
