// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "RCTCoreLGCosmosLikeTransactionBuilder.h"


@implementation RCTCoreLGCosmosLikeTransactionBuilder
//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeTransactionBuilder)

@synthesize bridge = _bridge;


+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}

/**
 * Set memo
 * @param memo the memo to set
 */
RCT_REMAP_METHOD(setMemo,setMemo:(NSDictionary *)currentInstance withParams:(nonnull NSString *)memo withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::setMemo, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::setMemo, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj setMemo:memo];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::setMemo", nil);
        return;
    }

}

/**
 * Set sequence
 * @param sequence The sequence to set
 */
RCT_REMAP_METHOD(setSequence,setSequence:(NSDictionary *)currentInstance withParams:(nonnull NSString *)sequence withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::setSequence, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::setSequence, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj setSequence:sequence];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::setSequence", nil);
        return;
    }

}

/**
 * Set accountNumber
 * @param accountNumber The accountNumber to set
 */
RCT_REMAP_METHOD(setAccountNumber,setAccountNumber:(NSDictionary *)currentInstance withParams:(nonnull NSString *)accountNumber withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::setAccountNumber, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::setAccountNumber, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj setAccountNumber:accountNumber];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::setAccountNumber", nil);
        return;
    }

}

/**
 * Add a new message in the internal range of messages
 * @param msg a new message
 */
RCT_REMAP_METHOD(addMessage,addMessage:(NSDictionary *)currentInstance withParams:(NSDictionary *)msg withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::addMessage, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::addMessage, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGCosmosLikeMessage *rctParam_msg = (RCTCoreLGCosmosLikeMessage *)[self.bridge moduleForName:@"CoreLGCosmosLikeMessage"];
    LGCosmosLikeMessage *objcParam_0 = (LGCosmosLikeMessage *)[rctParam_msg.objcImplementations objectForKey:msg[@"uid"]];
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj addMessage:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::addMessage", nil);
        return;
    }

}

/**
 * Set gas price
 * @param gas The gas to set
 */
RCT_REMAP_METHOD(setGas,setGas:(NSDictionary *)currentInstance withParams:(NSDictionary *)gas withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::setGas, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::setGas, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGAmount *rctParam_gas = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *objcParam_0 = (LGAmount *)[rctParam_gas.objcImplementations objectForKey:gas[@"uid"]];
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj setGas:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::setGas", nil);
        return;
    }

}

/**
 * Set gas Adjusment factor when estimating gas
 * @param gasAdjustment The (multiplicative) factor for gas evaluation
 */
RCT_REMAP_METHOD(setGasAdjustment,setGasAdjustment:(NSDictionary *)currentInstance withParams:(double)gasAdjustment withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::setGasAdjustment, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::setGasAdjustment, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj setGasAdjustment:gasAdjustment];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::setGasAdjustment", nil);
        return;
    }

}

/**
 * Set fee
 * Here the fee represents the gas price multiplied by the gas used
 * @param fee The fee to set
 */
RCT_REMAP_METHOD(setFee,setFee:(NSDictionary *)currentInstance withParams:(NSDictionary *)fee withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::setFee, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::setFee, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGAmount *rctParam_fee = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *objcParam_0 = (LGAmount *)[rctParam_fee.objcImplementations objectForKey:fee[@"uid"]];
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj setFee:objcParam_0];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::setFee", nil);
        return;
    }

}

/** Build a transaction from the given builder parameters. */
RCT_REMAP_METHOD(build,build:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::build, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::build, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    RCTCoreLGCosmosLikeTransactionCallback *objcParam_0 = [[RCTCoreLGCosmosLikeTransactionCallback alloc] initWithResolver:resolve rejecter:reject andBridge:self.bridge];
    [currentInstanceObj build:objcParam_0];

}

/**
 * Creates a clone of this builder.
 * @return A copy of the current builder instance.
 */
RCT_REMAP_METHOD(clone,clone:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::clone, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::clone, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    LGCosmosLikeTransactionBuilder * objcResult = [currentInstanceObj clone];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransactionBuilder *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransactionBuilder *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransactionBuilder"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransactionBuilder", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::clone", nil);
        return;
    }

}

/** Reset the current instance to its initial state */
RCT_REMAP_METHOD(reset,reset:(NSDictionary *)currentInstance WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    if (!currentInstance[@"uid"] || !currentInstance[@"type"])
    {
        reject(@"impl_call_error", @"Error while calling RCTCoreLGCosmosLikeTransactionBuilder::reset, first argument should be an instance of LGCosmosLikeTransactionBuilder", nil);
        return;
    }
    LGCosmosLikeTransactionBuilder *currentInstanceObj = [self.objcImplementations objectForKey:currentInstance[@"uid"]];
    if (!currentInstanceObj)
    {
        NSString *error = [NSString stringWithFormat:@"Error while calling LGCosmosLikeTransactionBuilder::reset, instance of uid %@ not found", currentInstance[@"uid"]];
        reject(@"impl_call_error", error, nil);
        return;
    }
    [currentInstanceObj reset];
    resolve(@(YES));

}

RCT_REMAP_METHOD(parseRawUnsignedTransaction,parseRawUnsignedTransactionwithParams:(NSDictionary *)currency
                                                                    rawTransaction:(nonnull NSString *)rawTransaction withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCurrency *rctParam_currency = (RCTCoreLGCurrency *)[self.bridge moduleForName:@"CoreLGCurrency"];
    LGCurrency *objcParam_0 = (LGCurrency *)[rctParam_currency.objcImplementations objectForKey:currency[@"uid"]];
    LGCosmosLikeTransaction * objcResult = [LGCosmosLikeTransactionBuilder parseRawUnsignedTransaction:objcParam_0 rawTransaction:rawTransaction];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransaction *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransaction *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransaction"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransaction", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::parseRawUnsignedTransaction", nil);
        return;
    }

}

RCT_REMAP_METHOD(parseRawSignedTransaction,parseRawSignedTransactionwithParams:(NSDictionary *)currency
                                                                rawTransaction:(nonnull NSString *)rawTransaction withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTCoreLGCurrency *rctParam_currency = (RCTCoreLGCurrency *)[self.bridge moduleForName:@"CoreLGCurrency"];
    LGCurrency *objcParam_0 = (LGCurrency *)[rctParam_currency.objcImplementations objectForKey:currency[@"uid"]];
    LGCosmosLikeTransaction * objcResult = [LGCosmosLikeTransactionBuilder parseRawSignedTransaction:objcParam_0 rawTransaction:rawTransaction];

    NSString *objcResult_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeTransaction *rctImpl_objcResult = (RCTCoreLGCosmosLikeTransaction *)[self.bridge moduleForName:@"CoreLGCosmosLikeTransaction"];
    NSArray *objcResult_array = [[NSArray alloc] initWithObjects:objcResult, objcResult_uuid, nil];
    [rctImpl_objcResult baseSetObject:objcResult_array];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeTransaction", @"uid" : objcResult_uuid };

    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGCosmosLikeTransactionBuilder::parseRawSignedTransaction", nil);
        return;
    }

}
@end
