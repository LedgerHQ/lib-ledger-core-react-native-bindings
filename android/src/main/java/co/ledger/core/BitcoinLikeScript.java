// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_script.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/** A general purpose script. */
public abstract class BitcoinLikeScript {
    /**
     * Get the head of the script. Scripts are organized by chunks, so you get an iterator-like
     * interface.
     */
    public abstract BitcoinLikeScriptChunk head();

    /** Turn the script into a string representation. */
    public abstract String toString();
    /** Release the underlying native object */
    public abstract void destroy();


    /** Parse data into a script. */
    public static native BitcoinLikeScript parse(byte[] data);

    private static final class CppProxy extends BitcoinLikeScript
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public BitcoinLikeScriptChunk head()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScript)");
            }
            return native_head(this.nativeRef);
        }
        private native BitcoinLikeScriptChunk native_head(long _nativeRef);

        @Override
        public String toString()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScript)");
            }
            return native_toString(this.nativeRef);
        }
        private native String native_toString(long _nativeRef);
    }
}
