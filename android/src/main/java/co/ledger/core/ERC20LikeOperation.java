// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from erc20.djinni

package co.ledger.core;

import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/** Class representing a Ethereum transaction. */
public abstract class ERC20LikeOperation {
    /** Get the hash of the transaction. */
    public abstract String getHash();

    /** Get the nonce of the transaction : sequence number issued by originating EOA. */
    public abstract BigInt getNonce();

    /** Get Gas price (in wei). */
    public abstract BigInt getGasPrice();

    /** Get start gas (in wei) : maximum amount of gas the originator is willing to pay. */
    public abstract BigInt getGasLimit();

    /** Used gas (in wei) : used gas during this transaction: */
    public abstract BigInt getUsedGas();

    /** Get source ETH address. */
    public abstract String getSender();

    /** Get destination ETH address. */
    public abstract String getReceiver();

    /** Get amount of ether to send. */
    public abstract BigInt getValue();

    /** Get binary data payload. */
    public abstract byte[] getData();

    /**
     * Get the time when the transaction was issued or the time of the block including this
     * this transaction.
     */
    public abstract Date getTime();

    /** Get operation type : whether it is a SEND or RECEIVE. */
    public abstract OperationType getOperationType();

    /** Get opration status : pending or confirmed. */
    public abstract int getStatus();

    private static final class CppProxy extends ERC20LikeOperation
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getHash()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHash(this.nativeRef);
        }
        private native String native_getHash(long _nativeRef);

        @Override
        public BigInt getNonce()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNonce(this.nativeRef);
        }
        private native BigInt native_getNonce(long _nativeRef);

        @Override
        public BigInt getGasPrice()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGasPrice(this.nativeRef);
        }
        private native BigInt native_getGasPrice(long _nativeRef);

        @Override
        public BigInt getGasLimit()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGasLimit(this.nativeRef);
        }
        private native BigInt native_getGasLimit(long _nativeRef);

        @Override
        public BigInt getUsedGas()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUsedGas(this.nativeRef);
        }
        private native BigInt native_getUsedGas(long _nativeRef);

        @Override
        public String getSender()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSender(this.nativeRef);
        }
        private native String native_getSender(long _nativeRef);

        @Override
        public String getReceiver()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getReceiver(this.nativeRef);
        }
        private native String native_getReceiver(long _nativeRef);

        @Override
        public BigInt getValue()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getValue(this.nativeRef);
        }
        private native BigInt native_getValue(long _nativeRef);

        @Override
        public byte[] getData()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getData(this.nativeRef);
        }
        private native byte[] native_getData(long _nativeRef);

        @Override
        public Date getTime()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTime(this.nativeRef);
        }
        private native Date native_getTime(long _nativeRef);

        @Override
        public OperationType getOperationType()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOperationType(this.nativeRef);
        }
        private native OperationType native_getOperationType(long _nativeRef);

        @Override
        public int getStatus()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStatus(this.nativeRef);
        }
        private native int native_getStatus(long _nativeRef);
    }
}
