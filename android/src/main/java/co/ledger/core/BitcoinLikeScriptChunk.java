// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_script.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class BitcoinLikeScriptChunk {
    public abstract boolean isOperator();

    public abstract boolean isPushedData();

    public abstract BitcoinLikeOperator getOperator();

    public abstract byte[] getPushedData();

    public abstract BitcoinLikeScriptChunk next();

    public abstract boolean hasNext();
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends BitcoinLikeScriptChunk
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public boolean isOperator()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScriptChunk)");
            }
            return native_isOperator(this.nativeRef);
        }
        private native boolean native_isOperator(long _nativeRef);

        @Override
        public boolean isPushedData()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScriptChunk)");
            }
            return native_isPushedData(this.nativeRef);
        }
        private native boolean native_isPushedData(long _nativeRef);

        @Override
        public BitcoinLikeOperator getOperator()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScriptChunk)");
            }
            return native_getOperator(this.nativeRef);
        }
        private native BitcoinLikeOperator native_getOperator(long _nativeRef);

        @Override
        public byte[] getPushedData()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScriptChunk)");
            }
            return native_getPushedData(this.nativeRef);
        }
        private native byte[] native_getPushedData(long _nativeRef);

        @Override
        public BitcoinLikeScriptChunk next()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScriptChunk)");
            }
            return native_next(this.nativeRef);
        }
        private native BitcoinLikeScriptChunk native_next(long _nativeRef);

        @Override
        public boolean hasNext()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (BitcoinLikeScriptChunk)");
            }
            return native_hasNext(this.nativeRef);
        }
        private native boolean native_hasNext(long _nativeRef);
    }
}
