// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tezos_like_wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TezosLikeTransactionBuilder {
    /**
     * Set type of operation (transaction, origination, reveal ...)
     * Default operation is "transaction" type
     */
    public abstract TezosLikeTransactionBuilder setType(TezosOperationTag type);

    /**
     * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
     * @param amount The value to send
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder sendToAddress(Amount amount, String address);

    /**
     * Send all available funds to the given address.
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder wipeToAddress(String address);

    /**
     * Set fees (in drop) the originator is willing to pay
     * Set transaction and (if needed) reveal fees with 'fees'
     * equivalent to call both functions setTransactionFees(fees) and setRevealFees(fees)
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder setFees(Amount fees);

    /**
     * Set transaction fees (in drop) the originator is willing to pay (reveal is not included)
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder setTransactionFees(Amount transactionFees);

    /**
     * Set reveal fees (in drop) the originator is willing to pay 
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder setRevealFees(Amount revealFees);

    /**
     * Set gas limit the originator is not willing to exceed.
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder setGasLimit(Amount gasLimit);

    /**
     * Set storage limit the originator is not willing to exceed.
     * Reference : https://tezos.gitlab.io/zeronet/whitedoc/michelson.html
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract TezosLikeTransactionBuilder setStorageLimit(BigInt storageLimit);

    /** Build a transaction from the given builder parameters. */
    public abstract void build(TezosLikeTransactionCallback callback);

    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    public abstract TezosLikeTransactionBuilder clone();

    /** Reset the current instance to its initial state */
    public abstract void reset();
    /** Release the underlying native object */
    public abstract void destroy();


    public static native TezosLikeTransaction parseRawUnsignedTransaction(Currency currency, byte[] rawTransaction, String protocolUpdate);

    public static native TezosLikeTransaction parseRawSignedTransaction(Currency currency, byte[] rawTransaction, String protocolUpdate);

    private static final class CppProxy extends TezosLikeTransactionBuilder
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public TezosLikeTransactionBuilder setType(TezosOperationTag type)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_setType(this.nativeRef, type);
        }
        private native TezosLikeTransactionBuilder native_setType(long _nativeRef, TezosOperationTag type);

        @Override
        public TezosLikeTransactionBuilder sendToAddress(Amount amount, String address)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_sendToAddress(this.nativeRef, amount, address);
        }
        private native TezosLikeTransactionBuilder native_sendToAddress(long _nativeRef, Amount amount, String address);

        @Override
        public TezosLikeTransactionBuilder wipeToAddress(String address)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_wipeToAddress(this.nativeRef, address);
        }
        private native TezosLikeTransactionBuilder native_wipeToAddress(long _nativeRef, String address);

        @Override
        public TezosLikeTransactionBuilder setFees(Amount fees)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_setFees(this.nativeRef, fees);
        }
        private native TezosLikeTransactionBuilder native_setFees(long _nativeRef, Amount fees);

        @Override
        public TezosLikeTransactionBuilder setTransactionFees(Amount transactionFees)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_setTransactionFees(this.nativeRef, transactionFees);
        }
        private native TezosLikeTransactionBuilder native_setTransactionFees(long _nativeRef, Amount transactionFees);

        @Override
        public TezosLikeTransactionBuilder setRevealFees(Amount revealFees)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_setRevealFees(this.nativeRef, revealFees);
        }
        private native TezosLikeTransactionBuilder native_setRevealFees(long _nativeRef, Amount revealFees);

        @Override
        public TezosLikeTransactionBuilder setGasLimit(Amount gasLimit)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_setGasLimit(this.nativeRef, gasLimit);
        }
        private native TezosLikeTransactionBuilder native_setGasLimit(long _nativeRef, Amount gasLimit);

        @Override
        public TezosLikeTransactionBuilder setStorageLimit(BigInt storageLimit)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_setStorageLimit(this.nativeRef, storageLimit);
        }
        private native TezosLikeTransactionBuilder native_setStorageLimit(long _nativeRef, BigInt storageLimit);

        @Override
        public void build(TezosLikeTransactionCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            native_build(this.nativeRef, callback);
        }
        private native void native_build(long _nativeRef, TezosLikeTransactionCallback callback);

        @Override
        public TezosLikeTransactionBuilder clone()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            return native_clone(this.nativeRef);
        }
        private native TezosLikeTransactionBuilder native_clone(long _nativeRef);

        @Override
        public void reset()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeTransactionBuilder)");
            }
            native_reset(this.nativeRef);
        }
        private native void native_reset(long _nativeRef);
    }
}
