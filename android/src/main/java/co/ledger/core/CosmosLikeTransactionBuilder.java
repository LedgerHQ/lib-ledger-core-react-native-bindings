// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class CosmosLikeTransactionBuilder {
    /**
     * Set memo
     * @param memo the memo to set
     */
    public abstract CosmosLikeTransactionBuilder setMemo(String memo);

    /**
     * Set sequence
     * @param sequence The sequence to set
     */
    public abstract CosmosLikeTransactionBuilder setSequence(String sequence);

    /**
     * Set accountNumber
     * @param accountNumber The accountNumber to set
     */
    public abstract CosmosLikeTransactionBuilder setAccountNumber(String accountNumber);

    /**
     * Add a new message in the internal range of messages
     * @param msg a new message
     */
    public abstract CosmosLikeTransactionBuilder addMessage(CosmosLikeMessage msg);

    /**
     * Set gas price
     * @param gas The gas to set
     */
    public abstract CosmosLikeTransactionBuilder setGas(Amount gas);

    /**
     * Set gas Adjusment factor when estimating gas
     * @param gasAdjustment The (multiplicative) factor for gas evaluation
     */
    public abstract CosmosLikeTransactionBuilder setGasAdjustment(double gasAdjustment);

    /**
     * Set fee
     * Here the fee represents the gas price multiplied by the gas used
     * @param fee The fee to set
     */
    public abstract CosmosLikeTransactionBuilder setFee(Amount fee);

    /** Build a transaction from the given builder parameters. */
    public abstract void build(CosmosLikeTransactionCallback callback);

    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    public abstract CosmosLikeTransactionBuilder clone();

    /** Reset the current instance to its initial state */
    public abstract void reset();
    /** Release the underlying native object */
    public abstract void destroy();


    public static native CosmosLikeTransaction parseRawUnsignedTransaction(Currency currency, String rawTransaction);

    public static native CosmosLikeTransaction parseRawSignedTransaction(Currency currency, String rawTransaction);

    private static final class CppProxy extends CosmosLikeTransactionBuilder
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public CosmosLikeTransactionBuilder setMemo(String memo)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_setMemo(this.nativeRef, memo);
        }
        private native CosmosLikeTransactionBuilder native_setMemo(long _nativeRef, String memo);

        @Override
        public CosmosLikeTransactionBuilder setSequence(String sequence)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_setSequence(this.nativeRef, sequence);
        }
        private native CosmosLikeTransactionBuilder native_setSequence(long _nativeRef, String sequence);

        @Override
        public CosmosLikeTransactionBuilder setAccountNumber(String accountNumber)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_setAccountNumber(this.nativeRef, accountNumber);
        }
        private native CosmosLikeTransactionBuilder native_setAccountNumber(long _nativeRef, String accountNumber);

        @Override
        public CosmosLikeTransactionBuilder addMessage(CosmosLikeMessage msg)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_addMessage(this.nativeRef, msg);
        }
        private native CosmosLikeTransactionBuilder native_addMessage(long _nativeRef, CosmosLikeMessage msg);

        @Override
        public CosmosLikeTransactionBuilder setGas(Amount gas)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_setGas(this.nativeRef, gas);
        }
        private native CosmosLikeTransactionBuilder native_setGas(long _nativeRef, Amount gas);

        @Override
        public CosmosLikeTransactionBuilder setGasAdjustment(double gasAdjustment)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_setGasAdjustment(this.nativeRef, gasAdjustment);
        }
        private native CosmosLikeTransactionBuilder native_setGasAdjustment(long _nativeRef, double gasAdjustment);

        @Override
        public CosmosLikeTransactionBuilder setFee(Amount fee)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_setFee(this.nativeRef, fee);
        }
        private native CosmosLikeTransactionBuilder native_setFee(long _nativeRef, Amount fee);

        @Override
        public void build(CosmosLikeTransactionCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            native_build(this.nativeRef, callback);
        }
        private native void native_build(long _nativeRef, CosmosLikeTransactionCallback callback);

        @Override
        public CosmosLikeTransactionBuilder clone()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            return native_clone(this.nativeRef);
        }
        private native CosmosLikeTransactionBuilder native_clone(long _nativeRef);

        @Override
        public void reset()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeTransactionBuilder)");
            }
            native_reset(this.nativeRef);
        }
        private native void native_reset(long _nativeRef);
    }
}
