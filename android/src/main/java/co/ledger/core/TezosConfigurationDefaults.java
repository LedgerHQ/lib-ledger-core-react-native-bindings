// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tezos_like_wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TezosConfigurationDefaults {
    public static final String BCD_API_ENDPOINT = "https://api.better-call.dev/v1";

    public static final String TEZOS_DEFAULT_API_ENDPOINT = "https://explorers.api.live.ledger.com";

    public static final String TEZOS_DEFAULT_API_VERSION = "v3";

    public static final String TZSTATS_API_ENDPOINT = "https://api.tzstats.com/explorer";

    public static final String TEZOS_DEFAULT_NODE = "https://mainnet.tezrpc.me";

    public static final String TEZOS_OBSERVER_NODE_ENDPOINT_S3 = "https://s3.tezos.com";

    public static final String TEZOS_OBSERVER_WS_ENDPOINT_S2 = "wss://s2.tezos.com";

    public static final String TEZOS_OBSERVER_WS_ENDPOINT_S3 = "wss://s3.tezos.com";

    public static final String TEZOS_XPUB_CURVE_ED25519 = "ED25519";

    public static final String TEZOS_XPUB_CURVE_SECP256K1 = "SECP256K1";

    public static final String TEZOS_XPUB_CURVE_P256 = "P256";

    /**
     * Taken from some existing XTZ wallets
     * http://tezos.gitlab.io/protocols/005_babylon.html#gas-cost-changes
     */
    public static final String TEZOS_DEFAULT_FEES = "5000";

    public static final String TEZOS_DEFAULT_MAX_FEES = "30000";

    public static final String TEZOS_DEFAULT_GAS_LIMIT = "18000";

    public static final String TEZOS_DEFAULT_STORAGE_LIMIT = "300";

    public static final String TEZOS_PROTOCOL_UPDATE_BABYLON = "TEZOS_PROTOCOL_UPDATE_BABYLON";

    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends TezosConfigurationDefaults
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }
    }
}
