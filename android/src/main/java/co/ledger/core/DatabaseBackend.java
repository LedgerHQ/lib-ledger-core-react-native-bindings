// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing a database backend. */
public abstract class DatabaseBackend {
    /**
     * Get the maximum number of concurrent connection that the backend is able to open on a single database.
     * @return the size of the connection pool.
     */
    public abstract int getConnectionPoolSize();

    /**
     * Enable or disable query logging. By default logging is disabled. Query logging will record every SQL query in log streams.
     * @return this database backend (to chain configuration calls)
     */
    public abstract DatabaseBackend enableQueryLogging(boolean enable);

    /**
     * Return true if query logging is enabled.
     * @return trye if query logging is enabled, false otherwise.
     */
    public abstract boolean isLoggingEnabled();

    /**
     * Create an instance of SQLite3 database.
     * @return DatabaseBackend object
     */
    public static native DatabaseBackend getSqlite3Backend();

    /** Create a database backend instance from the given DatabaseEngine implementation. */
    public static native DatabaseBackend createBackendFromEngine(DatabaseEngine engine);

    private static final class CppProxy extends DatabaseBackend
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int getConnectionPoolSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConnectionPoolSize(this.nativeRef);
        }
        private native int native_getConnectionPoolSize(long _nativeRef);

        @Override
        public DatabaseBackend enableQueryLogging(boolean enable)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_enableQueryLogging(this.nativeRef, enable);
        }
        private native DatabaseBackend native_enableQueryLogging(long _nativeRef, boolean enable);

        @Override
        public boolean isLoggingEnabled()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isLoggingEnabled(this.nativeRef);
        }
        private native boolean native_isLoggingEnabled(long _nativeRef);
    }
}
