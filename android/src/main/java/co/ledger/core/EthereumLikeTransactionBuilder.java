// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Builder for transactions on the Ethereum blockchain.
 *
 * Use this interface when you want to build a transaction step by step.
 */
public abstract class EthereumLikeTransactionBuilder {
    /**
     * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
     * @param amount The value to send
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract EthereumLikeTransactionBuilder sendToAddress(Amount amount, String address);

    /**
     * Send all available funds to the given address.
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract EthereumLikeTransactionBuilder wipeToAddress(String address);

    /**
     * Set gas price (in wei) the originator is willing to pay.
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract EthereumLikeTransactionBuilder setGasPrice(Amount gasPrice);

    /**
     * Set gas limit (in wei) the originator is not willing to exceed.
     * @return A reference on the same builder in order to chain calls.
     */
    public abstract EthereumLikeTransactionBuilder setGasLimit(Amount gasLimit);

    /** Set input data the originator wants to embed in transaction. */
    public abstract EthereumLikeTransactionBuilder setInputData(byte[] data);

    /** Build a transaction from the given builder parameters. */
    public abstract void build(EthereumLikeTransactionCallback callback);

    /**
     * Create a clone of this builder.
     * @return A copy of the current builder instance.
     */
    public abstract EthereumLikeTransactionBuilder clone();

    /** Reset the current instance to its initial state */
    public abstract void reset();

    /** Create an unsigned transaction for the Ethereum blockchain out of a raw binary. */
    public static native EthereumLikeTransaction parseRawUnsignedTransaction(Currency currency, byte[] rawTransaction);

    /** Create a signed transaction for the Ethereum blockchain out of a raw binary. */
    public static native EthereumLikeTransaction parseRawSignedTransaction(Currency currency, byte[] rawTransaction);

    private static final class CppProxy extends EthereumLikeTransactionBuilder
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public EthereumLikeTransactionBuilder sendToAddress(Amount amount, String address)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendToAddress(this.nativeRef, amount, address);
        }
        private native EthereumLikeTransactionBuilder native_sendToAddress(long _nativeRef, Amount amount, String address);

        @Override
        public EthereumLikeTransactionBuilder wipeToAddress(String address)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_wipeToAddress(this.nativeRef, address);
        }
        private native EthereumLikeTransactionBuilder native_wipeToAddress(long _nativeRef, String address);

        @Override
        public EthereumLikeTransactionBuilder setGasPrice(Amount gasPrice)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setGasPrice(this.nativeRef, gasPrice);
        }
        private native EthereumLikeTransactionBuilder native_setGasPrice(long _nativeRef, Amount gasPrice);

        @Override
        public EthereumLikeTransactionBuilder setGasLimit(Amount gasLimit)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setGasLimit(this.nativeRef, gasLimit);
        }
        private native EthereumLikeTransactionBuilder native_setGasLimit(long _nativeRef, Amount gasLimit);

        @Override
        public EthereumLikeTransactionBuilder setInputData(byte[] data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setInputData(this.nativeRef, data);
        }
        private native EthereumLikeTransactionBuilder native_setInputData(long _nativeRef, byte[] data);

        @Override
        public void build(EthereumLikeTransactionCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_build(this.nativeRef, callback);
        }
        private native void native_build(long _nativeRef, EthereumLikeTransactionCallback callback);

        @Override
        public EthereumLikeTransactionBuilder clone()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_clone(this.nativeRef);
        }
        private native EthereumLikeTransactionBuilder native_clone(long _nativeRef);

        @Override
        public void reset()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_reset(this.nativeRef);
        }
        private native void native_reset(long _nativeRef);
    }
}
