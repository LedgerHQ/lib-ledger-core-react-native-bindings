// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class AlgorandOperation {
    public abstract AlgorandTransaction getTransaction();

    public abstract AlgorandOperationType getAlgorandOperationType();

    public abstract String getRewards();

    public abstract String getAssetAmount();
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends AlgorandOperation
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public AlgorandTransaction getTransaction()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (AlgorandOperation)");
            }
            return native_getTransaction(this.nativeRef);
        }
        private native AlgorandTransaction native_getTransaction(long _nativeRef);

        @Override
        public AlgorandOperationType getAlgorandOperationType()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (AlgorandOperation)");
            }
            return native_getAlgorandOperationType(this.nativeRef);
        }
        private native AlgorandOperationType native_getAlgorandOperationType(long _nativeRef);

        @Override
        public String getRewards()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (AlgorandOperation)");
            }
            return native_getRewards(this.nativeRef);
        }
        private native String native_getRewards(long _nativeRef);

        @Override
        public String getAssetAmount()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (AlgorandOperation)");
            }
            return native_getAssetAmount(this.nativeRef);
        }
        private native String native_getAssetAmount(long _nativeRef);
    }
}
