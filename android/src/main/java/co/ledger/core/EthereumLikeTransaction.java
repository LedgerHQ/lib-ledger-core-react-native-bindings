// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

package co.ledger.core;

import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/** Class representing a Ethereum transaction. */
public abstract class EthereumLikeTransaction {
    /** Get the hash of the transaction. */
    public abstract String getHash();

    /** Get the nonce of the transaction : sequence number issued by originating EOA. */
    public abstract int getNonce();

    /** Get Gas price (in wei). */
    public abstract Amount getGasPrice();

    /** Get start gas (in wei) : maximum amount of gas the originator is willing to pay. */
    public abstract Amount getGasLimit();

    /** Effective used gas. */
    public abstract Amount getGasUsed();

    /** Get destination ETH address. */
    public abstract EthereumLikeAddress getReceiver();

    /** Get ETH sender address. */
    public abstract EthereumLikeAddress getSender();

    /** Get amount of ether to send. */
    public abstract Amount getValue();

    /** Get binary data payload. */
    public abstract byte[] getData();

    /** Get status of transaction: equals to 1 if succeeded, 0 otherwise */
    public abstract int getStatus();

    /** Serialize the transaction to its raw format. */
    public abstract byte[] serialize();

    /** Set signature of transaction, when a signature is set serialize method gives back serialized Tx. */
    public abstract void setSignature(byte[] vSignature, byte[] rSignature, byte[] sSignature);

    public abstract void setDERSignature(byte[] signature);

    public abstract void setVSignature(byte[] vSignature);

    /**
     * Get the time when the transaction was issued or the time of the block including this
     * transaction.
     */
    public abstract Date getDate();

    /** Get block to which transaction belongs (was mined in). */
    public abstract EthereumLikeBlock getBlock();
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends EthereumLikeTransaction
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getHash()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getHash(this.nativeRef);
        }
        private native String native_getHash(long _nativeRef);

        @Override
        public int getNonce()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getNonce(this.nativeRef);
        }
        private native int native_getNonce(long _nativeRef);

        @Override
        public Amount getGasPrice()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getGasPrice(this.nativeRef);
        }
        private native Amount native_getGasPrice(long _nativeRef);

        @Override
        public Amount getGasLimit()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getGasLimit(this.nativeRef);
        }
        private native Amount native_getGasLimit(long _nativeRef);

        @Override
        public Amount getGasUsed()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getGasUsed(this.nativeRef);
        }
        private native Amount native_getGasUsed(long _nativeRef);

        @Override
        public EthereumLikeAddress getReceiver()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getReceiver(this.nativeRef);
        }
        private native EthereumLikeAddress native_getReceiver(long _nativeRef);

        @Override
        public EthereumLikeAddress getSender()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getSender(this.nativeRef);
        }
        private native EthereumLikeAddress native_getSender(long _nativeRef);

        @Override
        public Amount getValue()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getValue(this.nativeRef);
        }
        private native Amount native_getValue(long _nativeRef);

        @Override
        public byte[] getData()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getData(this.nativeRef);
        }
        private native byte[] native_getData(long _nativeRef);

        @Override
        public int getStatus()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getStatus(this.nativeRef);
        }
        private native int native_getStatus(long _nativeRef);

        @Override
        public byte[] serialize()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_serialize(this.nativeRef);
        }
        private native byte[] native_serialize(long _nativeRef);

        @Override
        public void setSignature(byte[] vSignature, byte[] rSignature, byte[] sSignature)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            native_setSignature(this.nativeRef, vSignature, rSignature, sSignature);
        }
        private native void native_setSignature(long _nativeRef, byte[] vSignature, byte[] rSignature, byte[] sSignature);

        @Override
        public void setDERSignature(byte[] signature)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            native_setDERSignature(this.nativeRef, signature);
        }
        private native void native_setDERSignature(long _nativeRef, byte[] signature);

        @Override
        public void setVSignature(byte[] vSignature)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            native_setVSignature(this.nativeRef, vSignature);
        }
        private native void native_setVSignature(long _nativeRef, byte[] vSignature);

        @Override
        public Date getDate()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getDate(this.nativeRef);
        }
        private native Date native_getDate(long _nativeRef);

        @Override
        public EthereumLikeBlock getBlock()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (EthereumLikeTransaction)");
            }
            return native_getBlock(this.nativeRef);
        }
        private native EthereumLikeBlock native_getBlock(long _nativeRef);
    }
}
