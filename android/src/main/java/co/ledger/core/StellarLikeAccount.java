// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class StellarLikeAccount {
    /**
     * Checks if the current account exists on the stellar Network. If it doesn't the account needs to be activated by
     * sending an account creation operation with an amount of at least the base reserve.
     * @return Callback with a boolean indicating if the account exists on the Stellar network or not.
     */
    public abstract void exists(BoolCallback callback);

    /**
     * Create a new transaction builder to create new transaction
     * @return The transaction builder
     */
    public abstract StellarLikeTransactionBuilder buildTransaction();

    /** Broadcast the given raw transaction to the network. */
    public abstract void broadcastRawTransaction(byte[] tx, StringCallback callback);

    /** Get base reserve of the network */
    public abstract void getBaseReserve(AmountCallback callback);

    /** Get sequence number to be used in the next transaction */
    public abstract void getSequence(BigIntCallback callback);

    /** Get recommended fee */
    public abstract void getFeeStats(StellarLikeFeeStatsCallback callback);

    /** Get signers for this account */
    public abstract void getSigners(StellarLikeAccountSignerListCallback callback);

    private static final class CppProxy extends StellarLikeAccount
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void exists(BoolCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_exists(this.nativeRef, callback);
        }
        private native void native_exists(long _nativeRef, BoolCallback callback);

        @Override
        public StellarLikeTransactionBuilder buildTransaction()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_buildTransaction(this.nativeRef);
        }
        private native StellarLikeTransactionBuilder native_buildTransaction(long _nativeRef);

        @Override
        public void broadcastRawTransaction(byte[] tx, StringCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_broadcastRawTransaction(this.nativeRef, tx, callback);
        }
        private native void native_broadcastRawTransaction(long _nativeRef, byte[] tx, StringCallback callback);

        @Override
        public void getBaseReserve(AmountCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getBaseReserve(this.nativeRef, callback);
        }
        private native void native_getBaseReserve(long _nativeRef, AmountCallback callback);

        @Override
        public void getSequence(BigIntCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getSequence(this.nativeRef, callback);
        }
        private native void native_getSequence(long _nativeRef, BigIntCallback callback);

        @Override
        public void getFeeStats(StellarLikeFeeStatsCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getFeeStats(this.nativeRef, callback);
        }
        private native void native_getFeeStats(long _nativeRef, StellarLikeFeeStatsCallback callback);

        @Override
        public void getSigners(StellarLikeAccountSignerListCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getSigners(this.nativeRef, callback);
        }
        private native void native_getSigners(long _nativeRef, StellarLikeAccountSignerListCallback callback);
    }
}
