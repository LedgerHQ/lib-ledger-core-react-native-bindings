// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ripple_like_wallet.djinni

package co.ledger.core;

import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * TODO: to be more accurate, all RippleLikeBlock classes should be renamed as RippleLikeLedger,
 * since there is an analogy between block and ledger concepts it's ok for the moment ...
 *Class representing a Ripple transaction
 */
public abstract class RippleLikeTransaction {
    /** Get the hash of the transaction. */
    public abstract String getHash();

    /** Get Fees (in drop) */
    public abstract Amount getFees();

    /** Get destination XRP address */
    public abstract RippleLikeAddress getReceiver();

    /** Get XRP sender address */
    public abstract RippleLikeAddress getSender();

    /** Get amount of XRP to send */
    public abstract Amount getValue();

    /** Serialize the transaction to its raw format. */
    public abstract byte[] serialize();

    /** Set signature of transaction, when a signature is set serialize method gives back serialized Tx */
    public abstract void setSignature(byte[] rSignature, byte[] sSignature);

    public abstract void setDERSignature(byte[] signature);

    /**
     * Get the time when the transaction was issued or the time of the block including
     * this transaction
     */
    public abstract Date getDate();

    /**
     * Get block to which transaction belongs (was mined in)
     *getBlock(): optional<RippleLikeBlock>;
     * Get sequence of an account when tx was built (number of sent transactions from an account)
     */
    public abstract BigInt getSequence();

    /** Get Ledger's sequence in which the tx was included */
    public abstract BigInt getLedgerSequence();

    /** Get Signing public Key */
    public abstract byte[] getSigningPubKey();

    private static final class CppProxy extends RippleLikeTransaction
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getHash()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHash(this.nativeRef);
        }
        private native String native_getHash(long _nativeRef);

        @Override
        public Amount getFees()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFees(this.nativeRef);
        }
        private native Amount native_getFees(long _nativeRef);

        @Override
        public RippleLikeAddress getReceiver()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getReceiver(this.nativeRef);
        }
        private native RippleLikeAddress native_getReceiver(long _nativeRef);

        @Override
        public RippleLikeAddress getSender()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSender(this.nativeRef);
        }
        private native RippleLikeAddress native_getSender(long _nativeRef);

        @Override
        public Amount getValue()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getValue(this.nativeRef);
        }
        private native Amount native_getValue(long _nativeRef);

        @Override
        public byte[] serialize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_serialize(this.nativeRef);
        }
        private native byte[] native_serialize(long _nativeRef);

        @Override
        public void setSignature(byte[] rSignature, byte[] sSignature)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSignature(this.nativeRef, rSignature, sSignature);
        }
        private native void native_setSignature(long _nativeRef, byte[] rSignature, byte[] sSignature);

        @Override
        public void setDERSignature(byte[] signature)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDERSignature(this.nativeRef, signature);
        }
        private native void native_setDERSignature(long _nativeRef, byte[] signature);

        @Override
        public Date getDate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDate(this.nativeRef);
        }
        private native Date native_getDate(long _nativeRef);

        @Override
        public BigInt getSequence()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSequence(this.nativeRef);
        }
        private native BigInt native_getSequence(long _nativeRef);

        @Override
        public BigInt getLedgerSequence()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLedgerSequence(this.nativeRef);
        }
        private native BigInt native_getLedgerSequence(long _nativeRef);

        @Override
        public byte[] getSigningPubKey()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSigningPubKey(this.nativeRef);
        }
        private native byte[] native_getSigningPubKey(long _nativeRef);
    }
}
