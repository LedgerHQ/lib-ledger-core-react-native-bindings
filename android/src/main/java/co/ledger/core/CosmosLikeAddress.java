// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/** Helper class for manipulating Cosmos like addresses. */
public abstract class CosmosLikeAddress {
    /**
     * Gets the version of the address.
     * @return The version of the address
     */
    public abstract byte[] getVersion();

    /**
     * Gets the raw hash160 of the public key
     * @return The 20 bytes of the public key hash160
     */
    public abstract byte[] getHash160();

    /**
     * Gets the network parameters used for serializing the address.
     * @return The network parameters of the address
     */
    public abstract CosmosLikeNetworkParameters getNetworkParameters();

    /**
     * Encodes to Bech32.
     * @return The Bech32 encoding
     */
    public abstract String toBech32();
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends CosmosLikeAddress
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public byte[] getVersion()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAddress)");
            }
            return native_getVersion(this.nativeRef);
        }
        private native byte[] native_getVersion(long _nativeRef);

        @Override
        public byte[] getHash160()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAddress)");
            }
            return native_getHash160(this.nativeRef);
        }
        private native byte[] native_getHash160(long _nativeRef);

        @Override
        public CosmosLikeNetworkParameters getNetworkParameters()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAddress)");
            }
            return native_getNetworkParameters(this.nativeRef);
        }
        private native CosmosLikeNetworkParameters native_getNetworkParameters(long _nativeRef);

        @Override
        public String toBech32()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAddress)");
            }
            return native_toBech32(this.nativeRef);
        }
        private native String native_toBech32(long _nativeRef);
    }
}
