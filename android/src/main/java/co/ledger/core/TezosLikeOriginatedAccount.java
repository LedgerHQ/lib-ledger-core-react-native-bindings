// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tezos_like_wallet.djinni

package co.ledger.core;

import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;

/** Class representing originated accounts */
public abstract class TezosLikeOriginatedAccount {
    /** Get address of originated account (prefixed with KT) */
    public abstract String getAddress();

    /**
     * Get publicKey of originated account
     * Could be empty if not yet revealed
     */
    public abstract String getPublicKey();

    /** Get balance of originated account */
    public abstract void getBalance(AmountCallback callback);

    /** Get balance history of originated account */
    public abstract void getBalanceHistory(Date start, Date end, TimePeriod period, AmountListCallback callback);

    /**
     * Know if possible to spend from this account
     * By default originations from libcore set it to true
     */
    public abstract boolean isSpendable();

    /**
     * Know if possible to delegate from this account
     * By default originations from libcore set it to true
     */
    public abstract boolean isDelegatable();

    /** Get related operations to account */
    public abstract OperationQuery queryOperations();

    /** Get builder to construct transaction on originated account */
    public abstract TezosLikeTransactionBuilder buildTransaction();
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends TezosLikeOriginatedAccount
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getAddress()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            return native_getAddress(this.nativeRef);
        }
        private native String native_getAddress(long _nativeRef);

        @Override
        public String getPublicKey()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            return native_getPublicKey(this.nativeRef);
        }
        private native String native_getPublicKey(long _nativeRef);

        @Override
        public void getBalance(AmountCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            native_getBalance(this.nativeRef, callback);
        }
        private native void native_getBalance(long _nativeRef, AmountCallback callback);

        @Override
        public void getBalanceHistory(Date start, Date end, TimePeriod period, AmountListCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            native_getBalanceHistory(this.nativeRef, start, end, period, callback);
        }
        private native void native_getBalanceHistory(long _nativeRef, Date start, Date end, TimePeriod period, AmountListCallback callback);

        @Override
        public boolean isSpendable()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            return native_isSpendable(this.nativeRef);
        }
        private native boolean native_isSpendable(long _nativeRef);

        @Override
        public boolean isDelegatable()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            return native_isDelegatable(this.nativeRef);
        }
        private native boolean native_isDelegatable(long _nativeRef);

        @Override
        public OperationQuery queryOperations()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            return native_queryOperations(this.nativeRef);
        }
        private native OperationQuery native_queryOperations(long _nativeRef);

        @Override
        public TezosLikeTransactionBuilder buildTransaction()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (TezosLikeOriginatedAccount)");
            }
            return native_buildTransaction(this.nativeRef);
        }
        private native TezosLikeTransactionBuilder native_buildTransaction(long _nativeRef);
    }
}
