// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/**Class representing a Cosmos account */
public abstract class CosmosLikeAccount {
    public abstract void broadcastRawTransaction(String transaction, StringCallback callback);

    public abstract void broadcastTransaction(CosmosLikeTransaction transaction, StringCallback callback);

    public abstract CosmosLikeTransactionBuilder buildTransaction();

    /** Get estimated gas limit to set so the transaction will succeed */
    public abstract void getEstimatedGasLimit(CosmosLikeTransaction transaction, BigIntCallback callback);

    /**
     * Ask the account to estimate the gas for a building transaction
     * This function uses the underlying infrastructure to simulate the gas
     * needed for the transaction as requested until now.
     * @param request is the CosmosGasLimitRequest for the specifics of the simulation
     */
    public abstract void estimateGas(CosmosGasLimitRequest buildingTx, BigIntCallback callback);

    /** Get the latest active validator set */
    public abstract void getLatestValidatorSet(CosmosLikeValidatorListCallback callback);

    /** Get information about one validator */
    public abstract void getValidatorInfo(String validatorAddress, CosmosLikeValidatorCallback callback);

    /** Get Total balance of account. Sum of spendable, delegated, pending rewards, and pending unbondings */
    public abstract void getTotalBalance(AmountCallback callback);

    /** Get Total amount in delegation of account. */
    public abstract void getDelegatedBalance(AmountCallback callback);

    /** Get Total pending rewards of account. */
    public abstract void getPendingRewardsBalance(AmountCallback callback);

    /** Get Total unbondings funds of account. */
    public abstract void getUnbondingBalance(AmountCallback callback);

    /** Get Total spendable balance of account. */
    public abstract void getSpendableBalance(AmountCallback callback);

    public abstract void getDelegations(CosmosLikeDelegationListCallback callback);

    public abstract void getPendingRewards(CosmosLikeRewardListCallback callback);

    public abstract void getUnbondings(CosmosLikeUnbondingListCallback callback);

    public abstract void getRedelegations(CosmosLikeRedelegationListCallback callback);

    /**
     * Get the current account sequence (synchronize to get latest value)
     * string like "14"
     */
    public abstract void getSequence(StringCallback callback);

    /**
     * Get the account number
     * String like "15"
     */
    public abstract void getAccountNumber(StringCallback callback);

    /**
     * Get the rewards withdrawal address
     * String Bech32 encoded string
     */
    public abstract void getWithdrawAddress(StringCallback callback);
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends CosmosLikeAccount
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void broadcastRawTransaction(String transaction, StringCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_broadcastRawTransaction(this.nativeRef, transaction, callback);
        }
        private native void native_broadcastRawTransaction(long _nativeRef, String transaction, StringCallback callback);

        @Override
        public void broadcastTransaction(CosmosLikeTransaction transaction, StringCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_broadcastTransaction(this.nativeRef, transaction, callback);
        }
        private native void native_broadcastTransaction(long _nativeRef, CosmosLikeTransaction transaction, StringCallback callback);

        @Override
        public CosmosLikeTransactionBuilder buildTransaction()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            return native_buildTransaction(this.nativeRef);
        }
        private native CosmosLikeTransactionBuilder native_buildTransaction(long _nativeRef);

        @Override
        public void getEstimatedGasLimit(CosmosLikeTransaction transaction, BigIntCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getEstimatedGasLimit(this.nativeRef, transaction, callback);
        }
        private native void native_getEstimatedGasLimit(long _nativeRef, CosmosLikeTransaction transaction, BigIntCallback callback);

        @Override
        public void estimateGas(CosmosGasLimitRequest buildingTx, BigIntCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_estimateGas(this.nativeRef, buildingTx, callback);
        }
        private native void native_estimateGas(long _nativeRef, CosmosGasLimitRequest buildingTx, BigIntCallback callback);

        @Override
        public void getLatestValidatorSet(CosmosLikeValidatorListCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getLatestValidatorSet(this.nativeRef, callback);
        }
        private native void native_getLatestValidatorSet(long _nativeRef, CosmosLikeValidatorListCallback callback);

        @Override
        public void getValidatorInfo(String validatorAddress, CosmosLikeValidatorCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getValidatorInfo(this.nativeRef, validatorAddress, callback);
        }
        private native void native_getValidatorInfo(long _nativeRef, String validatorAddress, CosmosLikeValidatorCallback callback);

        @Override
        public void getTotalBalance(AmountCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getTotalBalance(this.nativeRef, callback);
        }
        private native void native_getTotalBalance(long _nativeRef, AmountCallback callback);

        @Override
        public void getDelegatedBalance(AmountCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getDelegatedBalance(this.nativeRef, callback);
        }
        private native void native_getDelegatedBalance(long _nativeRef, AmountCallback callback);

        @Override
        public void getPendingRewardsBalance(AmountCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getPendingRewardsBalance(this.nativeRef, callback);
        }
        private native void native_getPendingRewardsBalance(long _nativeRef, AmountCallback callback);

        @Override
        public void getUnbondingBalance(AmountCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getUnbondingBalance(this.nativeRef, callback);
        }
        private native void native_getUnbondingBalance(long _nativeRef, AmountCallback callback);

        @Override
        public void getSpendableBalance(AmountCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getSpendableBalance(this.nativeRef, callback);
        }
        private native void native_getSpendableBalance(long _nativeRef, AmountCallback callback);

        @Override
        public void getDelegations(CosmosLikeDelegationListCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getDelegations(this.nativeRef, callback);
        }
        private native void native_getDelegations(long _nativeRef, CosmosLikeDelegationListCallback callback);

        @Override
        public void getPendingRewards(CosmosLikeRewardListCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getPendingRewards(this.nativeRef, callback);
        }
        private native void native_getPendingRewards(long _nativeRef, CosmosLikeRewardListCallback callback);

        @Override
        public void getUnbondings(CosmosLikeUnbondingListCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getUnbondings(this.nativeRef, callback);
        }
        private native void native_getUnbondings(long _nativeRef, CosmosLikeUnbondingListCallback callback);

        @Override
        public void getRedelegations(CosmosLikeRedelegationListCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getRedelegations(this.nativeRef, callback);
        }
        private native void native_getRedelegations(long _nativeRef, CosmosLikeRedelegationListCallback callback);

        @Override
        public void getSequence(StringCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getSequence(this.nativeRef, callback);
        }
        private native void native_getSequence(long _nativeRef, StringCallback callback);

        @Override
        public void getAccountNumber(StringCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getAccountNumber(this.nativeRef, callback);
        }
        private native void native_getAccountNumber(long _nativeRef, StringCallback callback);

        @Override
        public void getWithdrawAddress(StringCallback callback)
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (CosmosLikeAccount)");
            }
            native_getWithdrawAddress(this.nativeRef, callback);
        }
        private native void native_getWithdrawAddress(long _nativeRef, StringCallback callback);
    }
}
