// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class StellarLikeMemo {
    public abstract StellarLikeMemoType getMemoType();

    /** Get the value of the memo as string. Fail if the memo is not with type MEMO_TEXT */
    public abstract String getMemoText();

    /** Get the value of the memo as BigInt. Fail if the memo is not with type MEMO_ID */
    public abstract BigInt getMemoId();

    /** Get the value of the memo as byte array. Fail if the memo is not with type MEMO_HASH */
    public abstract byte[] getMemoHash();

    /** Get the value of the memo as byte array. Fail if the memo is not with type MEMO_RETURN */
    public abstract byte[] getMemoReturn();

    /**
     * Create a string version of the memo, no matter which underlying type it holds.
     * For MEMO_TEXT returns memo value.
     * For MEMO_ID, return a uint64 as string (base 10).
     * For MEMO_HASH, MEMO_RETURN, returns a hex encoded string.
     * For MEMO_NONE, returns an empty string
     */
    public abstract String memoValuetoString();
    /** Release the underlying native object */
    public abstract void destroy();


    private static final class CppProxy extends StellarLikeMemo
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        @Override
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public StellarLikeMemoType getMemoType()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (StellarLikeMemo)");
            }
            return native_getMemoType(this.nativeRef);
        }
        private native StellarLikeMemoType native_getMemoType(long _nativeRef);

        @Override
        public String getMemoText()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (StellarLikeMemo)");
            }
            return native_getMemoText(this.nativeRef);
        }
        private native String native_getMemoText(long _nativeRef);

        @Override
        public BigInt getMemoId()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (StellarLikeMemo)");
            }
            return native_getMemoId(this.nativeRef);
        }
        private native BigInt native_getMemoId(long _nativeRef);

        @Override
        public byte[] getMemoHash()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (StellarLikeMemo)");
            }
            return native_getMemoHash(this.nativeRef);
        }
        private native byte[] native_getMemoHash(long _nativeRef);

        @Override
        public byte[] getMemoReturn()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (StellarLikeMemo)");
            }
            return native_getMemoReturn(this.nativeRef);
        }
        private native byte[] native_getMemoReturn(long _nativeRef);

        @Override
        public String memoValuetoString()
        {
            if (this.destroyed.get())
            {
                throw new RuntimeException("trying to use a destroyed object (StellarLikeMemo)");
            }
            return native_memoValuetoString(this.nativeRef);
        }
        private native String native_memoValuetoString(long _nativeRef);
    }
}
