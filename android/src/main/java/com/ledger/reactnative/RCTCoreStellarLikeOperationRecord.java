// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from stellar_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.Amount;
import co.ledger.core.StellarLikeAsset;
import co.ledger.core.StellarLikeOperationRecord;
import co.ledger.core.StellarLikeOperationType;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreStellarLikeOperationRecord")
public class RCTCoreStellarLikeOperationRecord extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, StellarLikeOperationRecord> javaObjects;
    private Map<String, Object> implementationsData;
    public Map<String, StellarLikeOperationRecord> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreStellarLikeOperationRecord(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, StellarLikeOperationRecord>();
        this.implementationsData = new HashMap<>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreStellarLikeOperationRecord";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreStellarLikeOperationRecord", "First parameter of RCTCoreStellarLikeOperationRecord::release should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, StellarLikeOperationRecord> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(String operationHash, boolean successful, int operationType, String transactionHash, ReadableMap asset, Optional<ReadableMap> sourceAsset, Optional<ReadableMap> sourceAmount, Promise promise) {
        WritableNativeMap implementationsData = new WritableNativeMap();
        if (operationType < 0 || StellarLikeOperationType.values().length <= operationType)
        {
            promise.reject("Enum error", "Failed to get enum StellarLikeOperationType");
            return;
        }
        StellarLikeOperationType javaParam_2 = StellarLikeOperationType.values()[operationType];
        RCTCoreStellarLikeAsset rctParam_asset = this.reactContext.getNativeModule(RCTCoreStellarLikeAsset.class);
        StellarLikeAsset javaParam_4 = rctParam_asset.getJavaObjects().get(asset.getString("uid"));
        implementationsData.putString("asset", asset.getString("uid"));
        RCTCoreStellarLikeAsset rctParam_sourceAsset = this.reactContext.getNativeModule(RCTCoreStellarLikeAsset.class);
        StellarLikeAsset javaParam_5 = rctParam_sourceAsset.getJavaObjects().get(sourceAsset.get().getString("uid"));
        implementationsData.putString("sourceAsset", sourceAsset.get().getString("uid"));
        RCTCoreAmount rctParam_sourceAmount = this.reactContext.getNativeModule(RCTCoreAmount.class);
        Amount javaParam_6 = rctParam_sourceAmount.getJavaObjects().get(sourceAmount.get().getString("uid"));
        implementationsData.putString("sourceAmount", sourceAmount.get().getString("uid"));
        StellarLikeOperationRecord javaResult = new StellarLikeOperationRecord(operationHash, successful, javaParam_2, transactionHash, javaParam_4, javaParam_5, javaParam_6);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreStellarLikeOperationRecord");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    public void mapImplementationsData(ReadableMap currentInstance)
    {
        String currentInstanceUid = currentInstance.getString("uid");
        StellarLikeOperationRecord javaImpl = this.javaObjects.get(currentInstanceUid);
        WritableNativeMap implementationsData = new WritableNativeMap();
        StellarLikeAsset field_4 = javaImpl.getAsset();
        String field_4_uuid = UUID.randomUUID().toString();
        RCTCoreStellarLikeAsset rctImpl_field_4 = this.reactContext.getNativeModule(RCTCoreStellarLikeAsset.class);
        rctImpl_field_4.getJavaObjects().put(field_4_uuid, field_4);
        WritableNativeMap converted_field_4 = new WritableNativeMap();
        converted_field_4.putString("type","RCTCoreStellarLikeAsset");
        converted_field_4.putString("uid",field_4_uuid);
        implementationsData.putMap("asset", converted_field_4);
        StellarLikeAsset field_5 = javaImpl.getSourceAsset();
        String field_5_uuid = UUID.randomUUID().toString();
        RCTCoreStellarLikeAsset rctImpl_field_5 = this.reactContext.getNativeModule(RCTCoreStellarLikeAsset.class);
        rctImpl_field_5.getJavaObjects().put(field_5_uuid, field_5);
        WritableNativeMap converted_field_5 = new WritableNativeMap();
        converted_field_5.putString("type","RCTCoreStellarLikeAsset");
        converted_field_5.putString("uid",field_5_uuid);
        implementationsData.putMap("sourceAsset", converted_field_5);
        Amount field_6 = javaImpl.getSourceAmount();
        String field_6_uuid = UUID.randomUUID().toString();
        RCTCoreAmount rctImpl_field_6 = this.reactContext.getNativeModule(RCTCoreAmount.class);
        rctImpl_field_6.getJavaObjects().put(field_6_uuid, field_6);
        WritableNativeMap converted_field_6 = new WritableNativeMap();
        converted_field_6.putString("type","RCTCoreAmount");
        converted_field_6.putString("uid",field_6_uuid);
        implementationsData.putMap("sourceAmount", converted_field_6);
        this.implementationsData.put(currentInstanceUid, implementationsData);
    }
    @ReactMethod
    public void getOperationHash(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            StellarLikeOperationRecord javaObj = this.javaObjects.get(uid);
            String result = javaObj.getOperationHash();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getOperationHash", "First parameter of RCTCoreStellarLikeOperationRecord::getOperationHash should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

    @ReactMethod
    public void getSuccessful(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            StellarLikeOperationRecord javaObj = this.javaObjects.get(uid);
            boolean result = javaObj.getSuccessful();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putBoolean("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getSuccessful", "First parameter of RCTCoreStellarLikeOperationRecord::getSuccessful should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

    @ReactMethod
    public void getOperationType(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            StellarLikeOperationRecord javaObj = this.javaObjects.get(uid);
            StellarLikeOperationType result = javaObj.getOperationType();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putInt("value", result.ordinal());
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getOperationType", "First parameter of RCTCoreStellarLikeOperationRecord::getOperationType should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

    @ReactMethod
    public void getTransactionHash(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            StellarLikeOperationRecord javaObj = this.javaObjects.get(uid);
            String result = javaObj.getTransactionHash();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getTransactionHash", "First parameter of RCTCoreStellarLikeOperationRecord::getTransactionHash should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

    @ReactMethod
    public void getAsset(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("asset"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getAsset", "First parameter of RCTCoreStellarLikeOperationRecord::getAsset should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

    @ReactMethod
    public void getSourceAsset(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("sourceAsset"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getSourceAsset", "First parameter of RCTCoreStellarLikeOperationRecord::getSourceAsset should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

    @ReactMethod
    public void getSourceAmount(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("sourceAmount"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreStellarLikeOperationRecord::getSourceAmount", "First parameter of RCTCoreStellarLikeOperationRecord::getSourceAmount should be an instance of RCTCoreStellarLikeOperationRecord");
        }
    }

}
