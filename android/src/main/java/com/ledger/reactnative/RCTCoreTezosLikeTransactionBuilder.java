// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tezos_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.Amount;
import co.ledger.core.BigInt;
import co.ledger.core.Currency;
import co.ledger.core.TezosLikeTransaction;
import co.ledger.core.TezosLikeTransactionBuilder;
import co.ledger.core.TezosLikeTransactionCallback;
import co.ledger.core.TezosOperationTag;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreTezosLikeTransactionBuilder")
public class RCTCoreTezosLikeTransactionBuilder extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, TezosLikeTransactionBuilder> javaObjects;
    public Map<String, TezosLikeTransactionBuilder> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreTezosLikeTransactionBuilder(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, TezosLikeTransactionBuilder>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreTezosLikeTransactionBuilder";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreTezosLikeTransactionBuilder", "First parameter of RCTCoreTezosLikeTransactionBuilder::release should be an instance of RCTCoreTezosLikeTransactionBuilder");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, TezosLikeTransactionBuilder> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    /**
     * Set type of operation (transaction, origination, reveal ...)
     * Default operation is "transaction" type
     */
    @ReactMethod
    public void setType(ReadableMap currentInstance, int type, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            if (type < 0 || TezosOperationTag.values().length <= type)
            {
                promise.reject("Enum error", "Failed to get enum TezosOperationTag");
                return;
            }
            TezosOperationTag javaParam_0 = TezosOperationTag.values()[type];
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.setType(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
     * @param amount The value to send
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void sendToAddress(ReadableMap currentInstance, ReadableMap amount, String address, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_amount = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_amount.getJavaObjects().get(amount.getString("uid"));
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.sendToAddress(javaParam_0, address);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Send all available funds to the given address.
     * @param address Address of the recipient
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void wipeToAddress(ReadableMap currentInstance, String address, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            TezosLikeTransactionBuilder javaResult = currentInstanceObj.wipeToAddress(address);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set fees (in drop) the originator is willing to pay
     * Set transaction and (if needed) reveal fees with 'fees'
     * equivalent to call both functions setTransactionFees(fees) and setRevealFees(fees)
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void setFees(ReadableMap currentInstance, ReadableMap fees, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_fees = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_fees.getJavaObjects().get(fees.getString("uid"));
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.setFees(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set transaction fees (in drop) the originator is willing to pay (reveal is not included)
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void setTransactionFees(ReadableMap currentInstance, ReadableMap transactionFees, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_transactionFees = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_transactionFees.getJavaObjects().get(transactionFees.getString("uid"));
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.setTransactionFees(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set reveal fees (in drop) the originator is willing to pay 
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void setRevealFees(ReadableMap currentInstance, ReadableMap revealFees, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_revealFees = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_revealFees.getJavaObjects().get(revealFees.getString("uid"));
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.setRevealFees(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set gas limit the originator is not willing to exceed.
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void setGasLimit(ReadableMap currentInstance, ReadableMap gasLimit, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_gasLimit = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_gasLimit.getJavaObjects().get(gasLimit.getString("uid"));
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.setGasLimit(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set storage limit the originator is not willing to exceed.
     * Reference : https://tezos.gitlab.io/zeronet/whitedoc/michelson.html
     * @return A reference on the same builder in order to chain calls.
     */
    @ReactMethod
    public void setStorageLimit(ReadableMap currentInstance, ReadableMap storageLimit, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreBigInt rctParam_storageLimit = this.reactContext.getNativeModule(RCTCoreBigInt.class);
            BigInt javaParam_0 = rctParam_storageLimit.getJavaObjects().get(storageLimit.getString("uid"));
            TezosLikeTransactionBuilder javaResult = currentInstanceObj.setStorageLimit(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Build a transaction from the given builder parameters. */
    @ReactMethod
    public void build(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreTezosLikeTransactionCallback javaParam_0 = RCTCoreTezosLikeTransactionCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.build(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    @ReactMethod
    public void clone(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            TezosLikeTransactionBuilder javaResult = currentInstanceObj.clone();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Reset the current instance to its initial state */
    @ReactMethod
    public void reset(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            TezosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.reset();
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void parseRawUnsignedTransaction(ReadableMap currency, String rawTransaction, String protocolUpdate, Promise promise) {
        try
        {
            RCTCoreCurrency rctParam_currency = this.reactContext.getNativeModule(RCTCoreCurrency.class);
            Currency javaParam_0 = rctParam_currency.getJavaObjects().get(currency.getString("uid"));
            byte [] javaParam_1 = hexStringToByteArray(rawTransaction);

            TezosLikeTransaction javaResult = TezosLikeTransactionBuilder.parseRawUnsignedTransaction(javaParam_0, javaParam_1, protocolUpdate);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransaction rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransaction.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransaction");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void parseRawSignedTransaction(ReadableMap currency, String rawTransaction, String protocolUpdate, Promise promise) {
        try
        {
            RCTCoreCurrency rctParam_currency = this.reactContext.getNativeModule(RCTCoreCurrency.class);
            Currency javaParam_0 = rctParam_currency.getJavaObjects().get(currency.getString("uid"));
            byte [] javaParam_1 = hexStringToByteArray(rawTransaction);

            TezosLikeTransaction javaResult = TezosLikeTransactionBuilder.parseRawSignedTransaction(javaParam_0, javaParam_1, protocolUpdate);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreTezosLikeTransaction rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreTezosLikeTransaction.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreTezosLikeTransaction");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
