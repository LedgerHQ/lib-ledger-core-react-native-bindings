// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package com.ledger.reactnative;

import co.ledger.core.DatabaseBackend;
import co.ledger.core.DatabaseEngine;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/**Class representing a database backend. */
@ReactModule(name = "RCTCoreDatabaseBackend")
public class RCTCoreDatabaseBackend extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DatabaseBackend> javaObjects;
    public Map<String, DatabaseBackend> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreDatabaseBackend(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DatabaseBackend>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDatabaseBackend";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreDatabaseBackend", "First parameter of RCTCoreDatabaseBackend::release should be an instance of RCTCoreDatabaseBackend");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, DatabaseBackend> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    /**
     * Get the maximum number of concurrent connection that the backend is able to open on a single database.
     * @return the size of the connection pool.
     */
    @ReactMethod
    public void getConnectionPoolSize(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getConnectionPoolSize();
            WritableNativeMap result = new WritableNativeMap();
            result.putInt("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the maximum number of concurrent readonly connection that the backend is able to open on a single database.
     * @return the size of the readonly connection pool.
     */
    @ReactMethod
    public void getReadonlyConnectionPoolSize(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getReadonlyConnectionPoolSize();
            WritableNativeMap result = new WritableNativeMap();
            result.putInt("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Enable or disable query logging. By default logging is disabled. Query logging will record every SQL query in log streams.
     * @return this database backend (to chain configuration calls)
     */
    @ReactMethod
    public void enableQueryLogging(ReadableMap currentInstance, boolean enable, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBackend javaResult = currentInstanceObj.enableQueryLogging(enable);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return true if query logging is enabled.
     * @return trye if query logging is enabled, false otherwise.
     */
    @ReactMethod
    public void isLoggingEnabled(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseBackend currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isLoggingEnabled();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Create an instance of SQLite3 database.
     * @return DatabaseBackend object
     */
    @ReactMethod
    public void getSqlite3Backend(Promise promise) {
        try
        {
            DatabaseBackend javaResult = DatabaseBackend.getSqlite3Backend();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Create an instance of PostgreSQL database.
     * @return DatabaseBackend object
     */
    @ReactMethod
    public void getPostgreSQLBackend(int connectionPoolSize, int readonlyConnectionPoolSize, Promise promise) {
        try
        {
            DatabaseBackend javaResult = DatabaseBackend.getPostgreSQLBackend(connectionPoolSize, readonlyConnectionPoolSize);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Create a database backend instance from the given DatabaseEngine implementation. */
    @ReactMethod
    public void createBackendFromEngine(ReadableMap engine, Promise promise) {
        try
        {
            RCTCoreDatabaseEngine rctParam_engine = this.reactContext.getNativeModule(RCTCoreDatabaseEngine.class);
            DatabaseEngine javaParam_0 = rctParam_engine.getJavaObjects().get(engine.getString("uid"));
            DatabaseBackend javaResult = DatabaseBackend.createBackendFromEngine(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBackend");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
