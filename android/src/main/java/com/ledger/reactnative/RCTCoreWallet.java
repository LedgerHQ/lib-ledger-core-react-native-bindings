// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.AccountCallback;
import co.ledger.core.AccountCreationInfo;
import co.ledger.core.AccountCreationInfoCallback;
import co.ledger.core.AccountListCallback;
import co.ledger.core.BitcoinLikeWallet;
import co.ledger.core.BlockCallback;
import co.ledger.core.Currency;
import co.ledger.core.DynamicObject;
import co.ledger.core.ErrorCodeCallback;
import co.ledger.core.EventBus;
import co.ledger.core.ExtendedKeyAccountCreationInfo;
import co.ledger.core.ExtendedKeyAccountCreationInfoCallback;
import co.ledger.core.I32Callback;
import co.ledger.core.Logger;
import co.ledger.core.Preferences;
import co.ledger.core.StellarLikeWallet;
import co.ledger.core.Wallet;
import co.ledger.core.WalletType;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/** Class representing a wallet. */
@ReactModule(name = "RCTCoreWallet")
public class RCTCoreWallet extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, Wallet> javaObjects;
    public Map<String, Wallet> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreWallet(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, Wallet>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreWallet";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreWallet", "First parameter of RCTCoreWallet::release should be an instance of RCTCoreWallet");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, Wallet> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    /**
     * Get name of wallet.
     * @return string
     */
    @ReactMethod
    public void getName(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getName();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get account with specific index.
     * @param index, 32-bit integer, index of account in wallet
     * @param callback, Callback returning, if getAccount succeed, an Account object with given index
     */
    @ReactMethod
    public void getAccount(ReadableMap currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAccountCallback javaParam_1 = RCTCoreAccountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAccount(index, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get number of accounts instanciated under wallet.
     * @param callback, Callback returning, if getAccountCount succeed, a 32-bit integer representing number of accounts
     */
    @ReactMethod
    public void getAccountCount(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreI32Callback javaParam_0 = RCTCoreI32Callback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAccountCount(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get list of accounts instanciated under wallet in a given range.
     * @param offset, 32-bit integer from which we retrieve accounts
     * @param count, 32-bit integer, number of accounts to retrieve
     * @param callback, ListCallback returning, if getAccounts succeed, list of Accounts object
     */
    @ReactMethod
    public void getAccounts(ReadableMap currentInstance, int offset, int count, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAccountListCallback javaParam_2 = RCTCoreAccountListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAccounts(offset, count, javaParam_2);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get index of next account to create.
     * @return callback, Callback returning a 32-bit integer
     */
    @ReactMethod
    public void getNextAccountIndex(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreI32Callback javaParam_0 = RCTCoreI32Callback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getNextAccountIndex(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return event bus through which wallet synchronizes it's accounts and interact with blockchain.
     * @return EventBus object
     */
    @ReactMethod
    public void getEventBus(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            EventBus javaResult = currentInstanceObj.getEventBus();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreEventBus rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreEventBus.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreEventBus");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return synchronization status wallet, true if at least one of accounts is synchronizing.
     * @return bool
     */
    @ReactMethod
    public void isSynchronizing(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isSynchronizing();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Start synchronization of all accounts under wallet.
     * @return EventBus object through which wallet get notified of account's synchronization status
     */
    @ReactMethod
    public void synchronize(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            EventBus javaResult = currentInstanceObj.synchronize();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreEventBus rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreEventBus.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreEventBus");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get wallet preferences.
     * @return Preferences object
     */
    @ReactMethod
    public void getPreferences(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            Preferences javaResult = currentInstanceObj.getPreferences();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCorePreferences rctImpl_javaResult = this.reactContext.getNativeModule(RCTCorePreferences.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCorePreferences");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return account's logger which provides all needed (e.g. database) logs.
     * @return Logger Object
     */
    @ReactMethod
    public void getLogger(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            Logger javaResult = currentInstanceObj.getLogger();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreLogger rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreLogger.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreLogger");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get preferences of specific account.
     * @param index, 32-bit integer, account's index
     * @return Preferences object
     */
    @ReactMethod
    public void getAccountPreferences(ReadableMap currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            Preferences javaResult = currentInstanceObj.getAccountPreferences(index);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCorePreferences rctImpl_javaResult = this.reactContext.getNativeModule(RCTCorePreferences.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCorePreferences");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Convert wallet to a Bitcoin one.
     * @return BitcoinWallet object
     */
    @ReactMethod
    public void asBitcoinLikeWallet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            BitcoinLikeWallet javaResult = currentInstanceObj.asBitcoinLikeWallet();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeWallet rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreBitcoinLikeWallet.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreBitcoinLikeWallet");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get currency of wallet.
     * @return Currency object
     */
    @ReactMethod
    public void getCurrency(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            Currency javaResult = currentInstanceObj.getCurrency();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCurrency rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCurrency.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCurrency");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Tell whether wallet is a Bitcoin one.
     * @return bool
     */
    @ReactMethod
    public void isInstanceOfBitcoinLikeWallet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isInstanceOfBitcoinLikeWallet();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Tell whether wallet is a Ethereum one.
     * @return bool
     */
    @ReactMethod
    public void isInstanceOfEthereumLikeWallet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isInstanceOfEthereumLikeWallet();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Tell whether wallet is a Ripple one.
     * @return bool
     */
    @ReactMethod
    public void isInstanceOfRippleLikeWallet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isInstanceOfRippleLikeWallet();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Tell whether wallet is a Stellar one.
     * @return bool
     */
    @ReactMethod
    public void isInstanceOfStellarLikeWallet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isInstanceOfStellarLikeWallet();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Cast the instance to StellarLIkeWallet */
    @ReactMethod
    public void asStellarLikeWallet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            StellarLikeWallet javaResult = currentInstanceObj.asStellarLikeWallet();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreStellarLikeWallet rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreStellarLikeWallet.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreStellarLikeWallet");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get wallet type.
     * @return WalletType object
     */
    @ReactMethod
    public void getWalletType(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            WalletType javaResult = currentInstanceObj.getWalletType();
            WritableNativeMap result = new WritableNativeMap();
            int finalJavaResult = javaResult.ordinal();
            result.putInt("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get last block of blockchain the wallet operates on.
     * @param callback, Callback returning a Block object
     */
    @ReactMethod
    public void getLastBlock(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreBlockCallback javaParam_0 = RCTCoreBlockCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getLastBlock(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return infos about the creation of specific account.
     * @param accountIndex, 32-bit account, index of account in wallet
     * @param callback, Callback returning an AccountCreationInfo
     */
    @ReactMethod
    public void getAccountCreationInfo(ReadableMap currentInstance, int accountIndex, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAccountCreationInfoCallback javaParam_1 = RCTCoreAccountCreationInfoCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAccountCreationInfo(accountIndex, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**TODO */
    @ReactMethod
    public void getExtendedKeyAccountCreationInfo(ReadableMap currentInstance, int accountIndex, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreExtendedKeyAccountCreationInfoCallback javaParam_1 = RCTCoreExtendedKeyAccountCreationInfoCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getExtendedKeyAccountCreationInfo(accountIndex, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return infos about the next created account.
     * @param callback, Callback returning an AccountCreationInfo
     */
    @ReactMethod
    public void getNextAccountCreationInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAccountCreationInfoCallback javaParam_0 = RCTCoreAccountCreationInfoCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getNextAccountCreationInfo(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**TODO */
    @ReactMethod
    public void getNextExtendedKeyAccountCreationInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreExtendedKeyAccountCreationInfoCallback javaParam_0 = RCTCoreExtendedKeyAccountCreationInfoCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getNextExtendedKeyAccountCreationInfo(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get account from given account creation infos.
     * @param accountCreationInfo, AccountCreationInfo object
     * @param callback, Callback returning an Account object with given creation infos
     */
    @ReactMethod
    public void newAccountWithInfo(ReadableMap currentInstance, ReadableMap accountCreationInfo, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAccountCreationInfo rctParam_accountCreationInfo = this.reactContext.getNativeModule(RCTCoreAccountCreationInfo.class);
            AccountCreationInfo javaParam_0 = rctParam_accountCreationInfo.getJavaObjects().get(accountCreationInfo.getString("uid"));
            RCTCoreAccountCallback javaParam_1 = RCTCoreAccountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.newAccountWithInfo(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**TODO */
    @ReactMethod
    public void newAccountWithExtendedKeyInfo(ReadableMap currentInstance, ReadableMap extendedKeyAccountCreationInfo, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreExtendedKeyAccountCreationInfo rctParam_extendedKeyAccountCreationInfo = this.reactContext.getNativeModule(RCTCoreExtendedKeyAccountCreationInfo.class);
            ExtendedKeyAccountCreationInfo javaParam_0 = rctParam_extendedKeyAccountCreationInfo.getJavaObjects().get(extendedKeyAccountCreationInfo.getString("uid"));
            RCTCoreAccountCallback javaParam_1 = RCTCoreAccountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.newAccountWithExtendedKeyInfo(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Erase data (in user's DB) relative to wallet since given date.
     * @param date, start date of data deletion
     */
    @ReactMethod
    public void eraseDataSince(ReadableMap currentInstance, Date date, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreErrorCodeCallback javaParam_1 = RCTCoreErrorCodeCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.eraseDataSince(date, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Return wallet's configuration */
    @ReactMethod
    public void getConfiguration(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            Wallet currentInstanceObj = this.javaObjects.get(sUid);

            DynamicObject javaResult = currentInstanceObj.getConfiguration();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDynamicObject");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
