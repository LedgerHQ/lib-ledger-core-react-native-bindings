// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from erc20.djinni

package com.ledger.reactnative;

import co.ledger.core.BigInt;
import co.ledger.core.ERC20LikeAccount;
import co.ledger.core.ERC20LikeOperation;
import co.ledger.core.ERC20Token;
import co.ledger.core.OperationQuery;
import co.ledger.core.TimePeriod;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/** ERC20-like accounts class. */
public class RCTCoreERC20LikeAccount extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, ERC20LikeAccount> javaObjects;
    public Map<String, ERC20LikeAccount> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreERC20LikeAccount(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, ERC20LikeAccount>();
        WritableNativeMap.setUseNativeAccessor(true);
    }

    @Override
    public String getName()
    {
        return "RCTCoreERC20LikeAccount";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreERC20LikeAccount", "First parameter of RCTCoreERC20LikeAccount::release should be an instance of RCTCoreERC20LikeAccount");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, ERC20LikeAccount> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    /** Get an ERC20 token. */
    @ReactMethod
    public void getToken(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            ERC20Token javaResult = currentInstanceObj.getToken();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreERC20Token rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreERC20Token.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreERC20Token");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get the address of this ERC20 account. */
    @ReactMethod
    public void getAddress(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getAddress();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get the current balance of this ERC20 account. */
    @ReactMethod
    public void getBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            BigInt javaResult = currentInstanceObj.getBalance();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreBigInt.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreBigInt");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the balance history of this ERC20 account from a starting date (included) to an ending
     * date (included).
     */
    @ReactMethod
    public void getBalanceHistoryFor(ReadableMap currentInstance, Date start, Date end, int period, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            if (period < 0 || TimePeriod.values().length <= period)
            {
                promise.reject("Enum error", "Failed to get enum TimePeriod");
                return;
            }
            TimePeriod javaParam_2 = TimePeriod.values()[period];
            ArrayList<BigInt> javaResult = currentInstanceObj.getBalanceHistoryFor(start, end, javaParam_2);

            WritableNativeArray result = new WritableNativeArray();
            for (BigInt javaResult_elem : javaResult)
            {
                String javaResult_elem_uuid = UUID.randomUUID().toString();
                RCTCoreBigInt rctImpl_javaResult_elem = this.reactContext.getNativeModule(RCTCoreBigInt.class);
                rctImpl_javaResult_elem.getJavaObjects().put(javaResult_elem_uuid, javaResult_elem);
                WritableNativeMap result_elem = new WritableNativeMap();
                result_elem.putString("type","RCTCoreBigInt");
                result_elem.putString("uid",javaResult_elem_uuid);
                result.pushMap(result_elem);
            }

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get the list of operations performed on this ERC20 account. */
    @ReactMethod
    public void getOperations(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            ArrayList<ERC20LikeOperation> javaResult = currentInstanceObj.getOperations();

            WritableNativeArray result = new WritableNativeArray();
            for (ERC20LikeOperation javaResult_elem : javaResult)
            {
                String javaResult_elem_uuid = UUID.randomUUID().toString();
                RCTCoreERC20LikeOperation rctImpl_javaResult_elem = this.reactContext.getNativeModule(RCTCoreERC20LikeOperation.class);
                rctImpl_javaResult_elem.getJavaObjects().put(javaResult_elem_uuid, javaResult_elem);
                WritableNativeMap result_elem = new WritableNativeMap();
                result_elem.putString("type","RCTCoreERC20LikeOperation");
                result_elem.putString("uid",javaResult_elem_uuid);
                result.pushMap(result_elem);
            }

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Retrieve raw data concerning a transaction of a given amount to a given address. */
    @ReactMethod
    public void getTransferToAddressData(ReadableMap currentInstance, ReadableMap amount, String address, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreBigInt rctParam_amount = this.reactContext.getNativeModule(RCTCoreBigInt.class);
            BigInt javaParam_0 = rctParam_amount.getJavaObjects().get(amount.getString("uid"));
            byte[] javaResult = currentInstanceObj.getTransferToAddressData(javaParam_0, address);
            WritableNativeMap result = new WritableNativeMap();
            String finalJavaResult = byteArrayToHexString(javaResult);
            result.putString("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void queryOperations(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            ERC20LikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            OperationQuery javaResult = currentInstanceObj.queryOperations();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreOperationQuery.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreOperationQuery");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
