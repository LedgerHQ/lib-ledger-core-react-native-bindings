// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni

package com.ledger.reactnative;
import java.util.Arrays;
import java.util.List;
import java.util.Collections;
import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.bridge.JavaScriptModule;

public class RCTCoreBindingPackage implements ReactPackage
{
    @Override
    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext)
    {
        return Arrays.<NativeModule>asList(new RCTCoreRippleLikeTransaction(reactContext),
        new RCTCoreRippleLikeOperation(reactContext),
        new RCTCoreRippleLikeBlock(reactContext),
        new RCTCoreRippleLikeTransactionBuilder(reactContext),
        new RCTCoreRippleLikeAccount(reactContext),
        new RCTCoreRippleConfigurationDefaults(reactContext),
        new RCTCoreSecp256k1(reactContext),
        new RCTCoreNetworks(reactContext),
        new RCTCoreHashAlgorithmHelper(reactContext),
        new RCTCoreEvent(reactContext),
        new RCTCoreEventReceiver(reactContext),
        new RCTCoreEventBus(reactContext),
        new RCTCoreEventPublisher(reactContext),
        new RCTCoreSynchronizationStatus(reactContext),
        new RCTCoreDerivationPath(reactContext),
        new RCTCoreTrustIndicator(reactContext),
        new RCTCoreBlock(reactContext),
        new RCTCoreOperation(reactContext),
        new RCTCoreQueryFilter(reactContext),
        new RCTCoreOperationQuery(reactContext),
        new RCTCoreAccountCreationInfo(reactContext),
        new RCTCoreExtendedKeyAccountCreationInfo(reactContext),
        new RCTCoreAddress(reactContext),
        new RCTCoreAccount(reactContext),
        new RCTCoreWallet(reactContext),
        new RCTCoreDynamicArray(reactContext),
        new RCTCoreDynamicObject(reactContext),
        new RCTCoreBlockchainExplorerEngines(reactContext),
        new RCTCoreBlockchainObserverEngines(reactContext),
        new RCTCoreKeychainEngines(reactContext),
        new RCTCoreSynchronizerEngines(reactContext),
        new RCTCoreSynchronizationEngines(reactContext),
        new RCTCoreConfigurationDefaults(reactContext),
        new RCTCoreConfiguration(reactContext),
        new RCTCorePoolConfiguration(reactContext),
        new RCTCoreDatabaseError(reactContext),
        new RCTCoreDatabaseBlob(reactContext),
        new RCTCoreDatabaseColumn(reactContext),
        new RCTCoreDatabaseResultRow(reactContext),
        new RCTCoreDatabaseResultSet(reactContext),
        new RCTCoreDatabaseStatement(reactContext),
        new RCTCoreDatabaseConnection(reactContext),
        new RCTCoreDatabaseConnectionPool(reactContext),
        new RCTCoreDatabaseEngine(reactContext),
        new RCTCoreDatabaseBackend(reactContext),
        new RCTCoreRandomNumberGenerator(reactContext),
        new RCTCoreEthereumPublicKeyProvider(reactContext),
        new RCTCoreERC20Token(reactContext),
        new RCTCoreERC20LikeAccount(reactContext),
        new RCTCoreERC20LikeOperation(reactContext),
        new RCTCoreEthereumLikeWallet(reactContext),
        new RCTCoreEthereumLikeTransaction(reactContext),
        new RCTCoreEthereumLikeOperation(reactContext),
        new RCTCoreEthereumLikeBlock(reactContext),
        new RCTCoreEthereumLikeTransactionBuilder(reactContext),
        new RCTCoreEthereumLikeAccount(reactContext),
        new RCTCoreEstimatedSize(reactContext),
        new RCTCoreBitcoinLikeOperator(reactContext),
        new RCTCoreBitcoinLikeScriptChunk(reactContext),
        new RCTCoreBitcoinLikeScript(reactContext),
        new RCTCoreLocale(reactContext),
        new RCTCoreRippleLikeNetworkParameters(reactContext),
        new RCTCoreRippleLikeAddress(reactContext),
        new RCTCoreRippleLikeExtendedPublicKey(reactContext),
        new RCTCoreEthereumLikeNetworkParameters(reactContext),
        new RCTCoreEthereumLikeAddress(reactContext),
        new RCTCoreEthereumLikeExtendedPublicKey(reactContext),
        new RCTCoreBitcoinLikeNetworkParameters(reactContext),
        new RCTCoreBitcoinLikeAddress(reactContext),
        new RCTCoreBitcoinLikeExtendedPublicKey(reactContext),
        new RCTCoreCurrencyUnit(reactContext),
        new RCTCoreCurrency(reactContext),
        new RCTCoreFormatRules(reactContext),
        new RCTCoreAmount(reactContext),
        new RCTCorePreferences(reactContext),
        new RCTCorePreferencesEditor(reactContext),
        new RCTCoreBitcoinLikeWalletConfiguration(reactContext),
        new RCTCoreBitcoinLikeInput(reactContext),
        new RCTCoreBitcoinLikeOutput(reactContext),
        new RCTCoreBitcoinLikeBlock(reactContext),
        new RCTCoreBitcoinLikeTransaction(reactContext),
        new RCTCoreBitcoinLikeOperation(reactContext),
        new RCTCoreBitcoinLikeTransactionRequest(reactContext),
        new RCTCoreBitcoinLikePreparedTransaction(reactContext),
        new RCTCoreBitcoinLikeTransactionBuilder(reactContext),
        new RCTCoreBitcoinLikeAccount(reactContext),
        new RCTCoreBitcoinLikeWallet(reactContext),
        new RCTCoreWalletPool(reactContext),
        new RCTCoreWalletPoolBuilder(reactContext),
        new RCTCoreWebSocketConnection(reactContext),
        new RCTCoreWebSocketClient(reactContext),
        new RCTCoreError(reactContext),
        new RCTCoreHttpReadBodyResult(reactContext),
        new RCTCoreHttpUrlConnection(reactContext),
        new RCTCoreHttpRequest(reactContext),
        new RCTCoreHttpClient(reactContext),
        new RCTCoreBigInt(reactContext),
        new RCTCorePathResolver(reactContext),
        new RCTCoreRunnable(reactContext),
        new RCTCoreLock(reactContext),
        new RCTCoreExecutionContext(reactContext),
        new RCTCoreThreadDispatcher(reactContext),
        new RCTCoreLogPrinter(reactContext),
        new RCTCoreLogger(reactContext),
        new RCTCoreLedgerCore(reactContext));}

    public List<Class<? extends JavaScriptModule>> createJSModules()
    {
        return Collections.emptyList();
    }

    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext)
    {
        return Collections.emptyList();
    }
}
